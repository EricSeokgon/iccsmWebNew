<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<!-- Generated by javadoc (build 1.4.2_09) on Thu Nov 30 13:06:13 GMT+09:00 2006 -->
<TITLE>
gpkiapi_jni
</TITLE>

<META NAME="keywords" CONTENT="com.gpki.gpkiapi_jni class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="gpkiapi_jni";
}
</SCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<b>GPKIAPI <br>V1.3.0.0</b></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="gpkiapi_jni.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.gpki</FONT>
<BR>
Class gpkiapi_jni</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../resources/inherit.gif" ALT="extended by"><B>com.gpki.gpkiapi_jni</B>
</PRE>
<HR>
<DL>
<DT>public class <B>gpkiapi_jni</B><DT>extends java.lang.Object</DL>

<P>
<b>표준보안AP의 JAVA 버전</b> <br>
 <br>
 응용 어플리케이션에서 보안서비스를 제공하기 위해서 필요한 기능을 제공한다. <br>
 <br>
 <br>
 <table border = 1>
 <tr>
  <td width = 150 align = center>인증서 모듈</td>
  <td width = 150 align = center>CERT_</td>
  <td>인증서 내용 조회 및 검증</td>
 </tr>
 <tr>
  <td width = 150 align = center>개인키 모듈</td>
  <td width = 150 align = center>PRIKEY_</td>
  <td>비밀번호를 이용한 개인키 암/복호화</td>
 </tr>
 <tr>
  <td width = 150 align = center>저장매체 모듈</td>
  <td width = 150 align = center>STORAGE_</td>
  <td>하드디스크, 플로피디스크, USB 드라이브, CD-Key, 스마트카드와 같은 저장매체로 부터<br>인증서, 개인키 읽기/쓰기/삭제</td>
 </tr>
 <tr>
  <td width = 150 align = center>유무선 암호<br>메시지 모듈</td>
  <td width = 150 align = center>CMS_(유선용), WCMS_(무선용)</td>
  <td>서명 메시지, 비대칭키 암호 메시지 생성/처리</td>
 </tr>
 <tr>
  <td width = 150 align = center>시점확인 모듈</td>
  <td width = 150 align = center>TSP_</td>
  <td>시점확인 서버에 시점확인 토큰을 요청하고 검증/확인</td>
 </tr>
 <tr>
  <td width = 150 align = center>본인확인 모듈</td>
  <td width = 150 align = center>VID_</td>
  <td>식별번호를 이용한 본인확인</td>
 </tr>
 <tr>
  <td width = 150 align = center>암호 알고리즘<br>모듈</td>
  <td width = 150 align = center>CRYPT_</td>
  <td>메시지 암/복호화, 서명/검증, 메시지 다이제스트 생성, 맥값 생성/검증</td>
 </tr>
 </table>
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#API_OPT_RSA_ENC_V15">API_OPT_RSA_ENC_V15</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RSA알고리즘을 이용한 암/복호화 시에 사용할 RSA 버전 (RSA V1.5)으로서
 기본값으로 API_OPT_RSA_ENC_V20가 설정되어있다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#API_OPT_RSA_ENC_V20">API_OPT_RSA_ENC_V20</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RSA알고리즘을 이용한 암/복호화 시에 사용할 RSA 버전(RSA V2.0) <b>(기본값)</b></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baCertArray">baCertArray</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 서명 메시지에 포함되어있는 복수의 서명자 인증서를 저장</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baData">baData</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수의 output이 byte[] 형인 경우, 해당 output이 저장됨</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baIV">baIV</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수에서 사용하는 대칭키 알고리즘의 IV 정보</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baKey">baKey</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수에서 사용하는 대칭키 알고리즘의 키 정보</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baReturnArray">baReturnArray</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수의 output이 byte[] 형인 경우, 해당 output이 저장됨</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baSignerCert">baSignerCert</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;서명 메시지의 서명 주체 인증서가 저장됨</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baToken">baToken</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 서버로 부터 받은 응답 메시지에 포함된 시점확인 토큰이 저장됨</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#baTSACert">baTSACert</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 서버로 부터 받은 응답 메시지에 포함된 시점확인 서버의 인증서가 저장됨</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_REV_CHECK_ALL">CERT_REV_CHECK_ALL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 경로의 모든 인증서의 폐지여부를 확인하며,
 사용자 인증서 확인 시, OCSP를 우선적으로 이용하고 실패시 CRL을 이용 <b>(기본값)</b></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_REV_CHECK_ARL">CERT_REV_CHECK_ARL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 인증기관 인증서의 폐지여부를 ARL을 이용하여 확인함</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_REV_CHECK_CRL">CERT_REV_CHECK_CRL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 사용자 인증서의 폐지여부를 CRL을 이용하여 확인함</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_REV_CHECK_NONE">CERT_REV_CHECK_NONE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 인증서 폐지여부를 확인하지 않음</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_REV_CHECK_OCSP">CERT_REV_CHECK_OCSP</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 사용자 인증서의 폐지여부를 OCSP를 이용하여 확인함</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_TYPE_KM">CERT_TYPE_KM</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 검증하고자하는 인증서의 종류가 키분배용인 경우에 설정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_TYPE_OCSP">CERT_TYPE_OCSP</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 검증하고자하는 인증서의 종류가 OCSP 서버용인 경우에 설정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_TYPE_SIGN">CERT_TYPE_SIGN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 검증하고자하는 인증서의 종류가 서명용인 경우에 설정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_TYPE_TSA">CERT_TYPE_TSA</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 검증하고자하는 인증서의 종류가 TSA 서버용인 경우에 설정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_VERIFY_CA_CERT">CERT_VERIFY_CA_CERT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 최상위 인증기관 하위 인증기관 인증서까지 검증
 기본값으로 CERT_VERIFY_FULL_PATH 가 설정되어있음</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_VERIFY_FULL_PATH">CERT_VERIFY_FULL_PATH</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 최상위 인증기관 인증서 부터 사용자 인증서까지 전체 경로를 검증 <b>(기본값)</b></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_VERIFY_USER_CERT">CERT_VERIFY_USER_CERT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 사용자 인증서만을 검증한다.
 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#DATA_TYPE_GPKI_KM">DATA_TYPE_GPKI_KM</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에서 행정 키분배용 인증서/개인키를 다루는 경우</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#DATA_TYPE_GPKI_SIGN">DATA_TYPE_GPKI_SIGN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에서 행정 서명용 인증서/개인키를 다루는 경우</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#DATA_TYPE_NPKI_KM">DATA_TYPE_NPKI_KM</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에서 민간 키분배용 인증서/개인키를 다루는 경우</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#DATA_TYPE_NPKI_SIGN">DATA_TYPE_NPKI_SIGN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에서 민간 서명용 인증서/개인키를 다루는 경우</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#DATA_TYPE_OTHER">DATA_TYPE_OTHER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에서 임의 위치의 개인키/인증서를 다루는 경우</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#HASH_ALG_HAS160">HASH_ALG_HAS160</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HAS160 알고리즘을 이용한 메시지 다이제스트 생성.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#HASH_ALG_MD5">HASH_ALG_MD5</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MD5 알고리즘을 이용한 메시지 다이제스트 생성.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#HASH_ALG_SHA1">HASH_ALG_SHA1</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA1 알고리즘을 이용한 메시지 다이제스트 생성.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#HASH_ALG_SHA256">HASH_ALG_SHA256</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA256 알고리즘을 이용한 메시지 다이제스트 생성.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#KEY_TYPE_PRIVATE">KEY_TYPE_PRIVATE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;개인키를 이용하여 데이터를 암/복호화할 경우 사용</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#KEY_TYPE_PUBLIC">KEY_TYPE_PUBLIC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서의 공개키를 이용하여 데이터를 암/복호화할 경우 사용</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_ARL">LDAP_DATA_ARL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 인증기관용 폐지목록 리스트 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_CA_CERT">LDAP_DATA_CA_CERT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 인증기관용 인증서 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_CRL">LDAP_DATA_CRL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 사용자용 폐지목록 리스트 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_CTL">LDAP_DATA_CTL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 인증서 신뢰 목록 리스트 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_DELTA_CRL">LDAP_DATA_DELTA_CRL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 사용자용 델타 폐지목록 리스트 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_GPKI_WCERT">LDAP_DATA_GPKI_WCERT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 무선 행정인증체계의 인증서 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_KM_CERT">LDAP_DATA_KM_CERT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 키분배용용 인증서 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_DATA_SIGN_CERT">LDAP_DATA_SIGN_CERT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP에 게시되어있는 서명용 인증서 획득</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#MAC_ALG_MD5_HMAC">MAC_ALG_MD5_HMAC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MD5 HMAC을 이용한 맥값 생성/검증</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#MAC_ALG_SHA1_HMAC">MAC_ALG_SHA1_HMAC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA1 HMAC을 이용한 맥값 생성/검증</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#MEDIA_TYPE_DYNAMIC">MEDIA_TYPE_DYNAMIC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;동적 라이브러리를 이용하여 저장매체(스마트카드)하는 경우 이용</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#MEDIA_TYPE_FILE_PATH">MEDIA_TYPE_FILE_PATH</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;하드 디스크, 플로피 디스크, USB 드라이브등과 같이 파일 경로를 통해서 데이터를 획득할 수 있는 저장매체를 이용</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#nReturnInt">nReturnInt</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수의 output이 int 형인 경우, 해당 output이 저장됨</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#nSignerCnt">nSignerCnt</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 서명 메시지에 포함되어있는 복수의 서명자 인증서의 갯수를 저장</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#nSymAlg">nSymAlg</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수에서 사용하는 대칭키 알고리즘 정보</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sDetailErrorString">sDetailErrorString</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수 사용 시, 에러가 발생하였을 경우 gpkiapi 동적 라이브러리에서 제공하는 에러 정보를 확인함</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sLibPath">sLibPath</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;스마트 카드의 동적 라이브러리 경로</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sReturnString">sReturnString</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;함수의 output이 String 형인 경우, 해당 output이 저장됨 <br>
 함수 사용 시, 에러가 발생하였을 경우 에러 코드에 대한 에러 정보가 저장됨 <br></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sSignTime">sSignTime</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;서명 메시지의 서명 시간이 저장됨</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sSignTimeArray">sSignTimeArray</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 서명 메시지에 포함되어있는 복수의 서명에 대한 서명 시간 저장</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTCN">sTCN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 토큰을 발행한 서버 DN의 CN값</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTDN">sTDN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 토큰을 발행한 서버 DN값</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTGenTime">sTGenTime</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 토큰의 생성시간</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTHashAlg">sTHashAlg</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인을 요청한 문서의 메시지 다이제스트 생성 알고리즘</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTHashValue">sTHashValue</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인을 요청한 문서의 메시지 다이제스트</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTNonce">sTNonce</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 요청의 중간 공격을 막기위한 난수값</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTPolicy">sTPolicy</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 토큰을 발행시 적용된 정책 식별자</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#sTSerialNum">sTSerialNum</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 서버가 부여한 토큰 일련번호</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SYM_ALG_3DES_CBC">SYM_ALG_3DES_CBC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3DES 알고리즘을 이용한 대칭키 암/복호화</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SYM_ALG_ARIA_CBC">SYM_ALG_ARIA_CBC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ARIA 알고리즘을 이용한 대칭키 암/복호화</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SYM_ALG_DES_CBC">SYM_ALG_DES_CBC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DES 알고리즘을 이용한 대칭키 암/복호화</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SYM_ALG_NEAT_CBC">SYM_ALG_NEAT_CBC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NEAT 알고리즘을 이용한 대칭키 암/복호화</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SYM_ALG_NES_CBC">SYM_ALG_NES_CBC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NES 알고리즘을 이용한 대칭키 암/복호화</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SYM_ALG_SEED_CBC">SYM_ALG_SEED_CBC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SEED 알고리즘을 이용한 대칭키 암/복호화</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#gpkiapi_jni()">gpkiapi_jni</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;기본 생성자</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#API_Finish()">API_Finish</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNI에서 사용하는 gpkiapi 동적 라이브러리를 해제한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#API_GetInfo()">API_GetInfo</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;라이센스 정보와 함께 API의 버전을 확인한다. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#API_GetVersion()">API_GetVersion</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;API의 버전을 확인한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#API_Init(java.lang.String)">API_Init</A></B>(java.lang.String&nbsp;sWorkDir)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNI에서 사용하는 gpkiapi 동적 라이브러리를 초기화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#API_SetOption(int)">API_SetOption</A></B>(int&nbsp;nRSAOption)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;API 사용 시, 필요한 옵션을 설정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#BASE64_Decode(java.lang.String)">BASE64_Decode</A></B>(java.lang.String&nbsp;sEncData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터를 BASE64 디코딩한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#BASE64_Encode(byte[])">BASE64_Encode</A></B>(byte[]&nbsp;baData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터를 BASE64 인코딩한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_AddCert(byte[])">CERT_AddCert</A></B>(byte[]&nbsp;baCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서를 추가하여 복수개의 인증서 구조체를 만든다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_AddTrustedCert(byte[])">CERT_AddTrustedCert</A></B>(byte[]&nbsp;baTrustedCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시에 사용될 검증자가 신뢰하는 최상위 인증기관 인증서를 지정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetBasicConstraints()">CERT_GetBasicConstraints</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 기본제한 정보를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetCert(byte[], int)">CERT_GetCert</A></B>(byte[]&nbsp;baCerts,
             int&nbsp;nIndex)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;복수개의 인증서 구조체에 있는 특정 인덱스의 인증서를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetCertCount(byte[])">CERT_GetCertCount</A></B>(byte[]&nbsp;baCerts)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;복수개의 인증서 구조체에 포함되어있는 인증서의 갯수를 확인한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetCertPolicyID()">CERT_GetCertPolicyID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 정책 식별자(OID)를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetIssuerName()">CERT_GetIssuerName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 발급자 이름(DN)을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetKeyUsage()">CERT_GetKeyUsage</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 용도를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetPubKeyAlg()">CERT_GetPubKeyAlg</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 공개키 알고리즘을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetRemainDays(byte[])">CERT_GetRemainDays</A></B>(byte[]&nbsp;baCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 남은 유효기간을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetSerialNum()">CERT_GetSerialNum</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 일련번호를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetSubjectName()">CERT_GetSubjectName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 주체 이름(DN)을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetUID()">CERT_GetUID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 주체 DN의 CN값을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetValidity()">CERT_GetValidity</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 로드한 인증서의 유효기간을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])">CERT_Load</A></B>(byte[]&nbsp;baCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보를 확인하기 위한 인증서 메모리에 로드한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)">CERT_SetVerifyEnv</A></B>(int&nbsp;nRange,
                  int&nbsp;nCertCheck,
                  boolean&nbsp;bUseCash,
                  java.lang.String&nbsp;sTime,
                  java.lang.String&nbsp;sOCSPURL)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서 검증 시, 필요한 옵션을 지정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Unload()">CERT_Unload</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;정보 확인을 위해 메모리에 로드되어있던 인증서를 해제한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])">CERT_Verify</A></B>(byte[]&nbsp;baCert,
            int&nbsp;nCertType,
            java.lang.String&nbsp;sCertPolicies,
            java.lang.String&nbsp;sConfFilePath,
            boolean&nbsp;bSign,
            byte[]&nbsp;baMyCert,
            byte[]&nbsp;baMyPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서를 검증한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_VerifyByIVS(java.lang.String, byte[], byte[])">CERT_VerifyByIVS</A></B>(java.lang.String&nbsp;sConfFilePath,
                 byte[]&nbsp;baCert,
                 byte[]&nbsp;baMyCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;환경파일에있는 통합검증서버의 정보(IP, Port)를 이용하여 통합검증서버를 이용하여 인증서를 검증한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEncryptedData(byte[])">CMS_MakeEncryptedData</A></B>(byte[]&nbsp;baTBEData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;이미 생성 또는 설정된 대칭키 알고리즘, 키, IV값을 이용하여 대칭키 암호 메시지를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData_File(byte[], java.lang.String, int, java.lang.String)">CMS_MakeEnvelopedData_File</A></B>(byte[]&nbsp;baCert,
                           java.lang.String&nbsp;sMsgFilePath,
                           int&nbsp;nSymAlg,
                           java.lang.String&nbsp;sEnvDataFilePath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData_NoContent_File(byte[], java.lang.String, int, java.lang.String, java.lang.String)">CMS_MakeEnvelopedData_NoContent_File</A></B>(byte[]&nbsp;baCert,
                                     java.lang.String&nbsp;sMsgFilePath,
                                     int&nbsp;nSymAlg,
                                     java.lang.String&nbsp;sEnvDataFilePath,
                                     java.lang.String&nbsp;sEncFilePath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData(byte[], byte[], int)">CMS_MakeEnvelopedData</A></B>(byte[]&nbsp;baCert,
                      byte[]&nbsp;baTBEData,
                      int&nbsp;nSymAlg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedDataWithMultiRecipients(byte[], byte[], int)">CMS_MakeEnvelopedDataWithMultiRecipients</A></B>(byte[]&nbsp;baCerts,
                                         byte[]&nbsp;baTBEData,
                                         int&nbsp;nSymAlg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedAndEnvData(byte[], byte[], byte[], byte[], int)">CMS_MakeSignedAndEnvData</A></B>(byte[]&nbsp;baCert,
                         byte[]&nbsp;baPriKey,
                         byte[]&nbsp;baRecCert,
                         byte[]&nbsp;baData,
                         int&nbsp;nSymAlg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 서명 및 암호 메시지를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)">CMS_MakeSignedData</A></B>(byte[]&nbsp;baCert,
                   byte[]&nbsp;baPriKey,
                   byte[]&nbsp;baTBSData,
                   java.lang.String&nbsp;sSignTime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;메시지의 무결성과 서명자의 인증을 위하여 유선용 서명 메시지를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedDataWithAddSigner(byte[], byte[], byte[], java.lang.String)">CMS_MakeSignedDataWithAddSigner</A></B>(byte[]&nbsp;baCert,
                                byte[]&nbsp;baPriKey,
                                byte[]&nbsp;baSignedData,
                                java.lang.String&nbsp;sSignTime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;이미 생성된 유선용 서명 메시지에 서명을 추가한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEncryptedData(byte[], byte[])">CMS_ProcessEncryptedData</A></B>(byte[]&nbsp;baKey,
                         byte[]&nbsp;baEncryptedData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;대칭키 암호 메시지를 복호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData_File(byte[], byte[], java.lang.String, java.lang.String)">CMS_ProcessEnvelopedData_File</A></B>(byte[]&nbsp;baCert,
                              byte[]&nbsp;baPriKey,
                              java.lang.String&nbsp;sEnvDataFilePath,
                              java.lang.String&nbsp;sMsgFilePath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 암호 메시지를 복호화하여 원본 메시지를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData_NoContent_File(byte[], byte[], java.lang.String, java.lang.String, java.lang.String)">CMS_ProcessEnvelopedData_NoContent_File</A></B>(byte[]&nbsp;baCert,
                                        byte[]&nbsp;baPriKey,
                                        java.lang.String&nbsp;sEnvDataFilePath,
                                        java.lang.String&nbsp;sEncFilePath,
                                        java.lang.String&nbsp;sMsgFilePath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 암호 메시지를 복호화하여 원본 메시지를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData(byte[], byte[], byte[])">CMS_ProcessEnvelopedData</A></B>(byte[]&nbsp;baCert,
                         byte[]&nbsp;baPriKey,
                         byte[]&nbsp;baEnvelopedData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 암호 메시지를 복호화하여 원본 메시지를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])">CMS_ProcessSignedAndEnvData</A></B>(byte[]&nbsp;baCert,
                            byte[]&nbsp;baKey,
                            byte[]&nbsp;baSignedAndEnvlopedData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 서명 및 암호 메시지를 처리한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData(byte[])">CMS_ProcessSignedData</A></B>(byte[]&nbsp;baSignedData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 서명 메시지의 서명을 검증하고 원본 데이터와 서명자 정보를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])">CMS_ProcessSignedData2</A></B>(byte[]&nbsp;baSignedData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;유선용 서명 메시지의 서명을 검증하고 원본 데이터와 복수의 서명자 정보를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymDecrypt(int, byte[], byte[])">CRYPT_AsymDecrypt</A></B>(int&nbsp;nKeyType,
                  byte[]&nbsp;baKey,
                  byte[]&nbsp;baEncData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;비대칭키를 이용하여 복호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymEncrypt(int, byte[], byte[])">CRYPT_AsymEncrypt</A></B>(int&nbsp;nKeyType,
                  byte[]&nbsp;baKey,
                  byte[]&nbsp;baTBEData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;비대칭키를 이용하여 암호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_ClearKeyAndIV()">CRYPT_ClearKeyAndIV</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;설정되어있는 대칭키 알고리즘과 키, IV를 삭제한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Decrypt_File(java.lang.String, java.lang.String)">CRYPT_Decrypt_File</A></B>(java.lang.String&nbsp;sCipherTextPath,
                   java.lang.String&nbsp;sPlainTextPath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;설정되어있는 대칭키 정보를 이용하여 파일을 복호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Decrypt(byte[])">CRYPT_Decrypt</A></B>(byte[]&nbsp;baCipherText)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;설정되어있는 대칭키 정보를 이용하여 데이터를 복호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Encrypt_File(java.lang.String, java.lang.String)">CRYPT_Encrypt_File</A></B>(java.lang.String&nbsp;sPlainTextPath,
                   java.lang.String&nbsp;sCipherTextPath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;설정되어있는 대칭키 정보를 이용하여 파일을 암호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Encrypt(byte[])">CRYPT_Encrypt</A></B>(byte[]&nbsp;baPlainText)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;설정되어있는 대칭키 정보를 이용하여 데이터를 암호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)">CRYPT_GenKeyAndIV</A></B>(int&nbsp;nSymAlg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;대칭키 알고리즘에 따른 키와 IV를 생성하여 환경변수에 설정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenMAC(int, java.lang.String, byte[])">CRYPT_GenMAC</A></B>(int&nbsp;nMACAlg,
             java.lang.String&nbsp;sPasswd,
             byte[]&nbsp;baTBMData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터의 MAC값을 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenRandom(int)">CRYPT_GenRandom</A></B>(int&nbsp;nLen)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;임의 길이의 난수를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GetKeyAndIV()">CRYPT_GetKeyAndIV</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;설정되어있는 대칭키 알고리즘과 키, IV를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Hash(int, byte[])">CRYPT_Hash</A></B>(int&nbsp;nHashAlg,
           byte[]&nbsp;baTBHData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;해쉬알고리즘을 이용하여 메시지 다이제스트를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])">CRYPT_SetKeyAndIV</A></B>(int&nbsp;nSymAlg,
                  byte[]&nbsp;baKey,
                  byte[]&nbsp;baIV)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;대칭키 알고리즘에 따른 키와 IV를 설정한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Sign(byte[], byte[], int, byte[])">CRYPT_Sign</A></B>(byte[]&nbsp;baCert,
           byte[]&nbsp;baPriKey,
           int&nbsp;nHashAlg,
           byte[]&nbsp;baTBSData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;개인키를 이용하여 메시지의 서명값을 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Verify(byte[], int, byte[], byte[])">CRYPT_Verify</A></B>(byte[]&nbsp;baPubKey,
             int&nbsp;nHashAlg,
             byte[]&nbsp;baData,
             byte[]&nbsp;baSignature)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;공개키와 원본 메시지를 이용하여 서명값을 검증한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])">CRYPT_VerifyMAC</A></B>(int&nbsp;nMACAlg,
                java.lang.String&nbsp;sPasswd,
                byte[]&nbsp;baTBMData,
                byte[]&nbsp;baMAC)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;데이터의 MAC값을 검증한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#getCMS_GetSignTime(int)">getCMS_GetSignTime</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CMS_ProcessSignedData2 메소드를 이용하여 서명 메시지를 검증하였을 경우 서명 시간을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#getCMS_GetSinger(int)">getCMS_GetSinger</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CMS_ProcessSignedData2 메소드를 이용하여 서명 메시지를 검증하였을 경우 서명자 인증서를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetAnyDataByURL(java.lang.String, java.lang.String)">LDAP_GetAnyDataByURL</A></B>(java.lang.String&nbsp;sAttribute,
                     java.lang.String&nbsp;sURL)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP 디렉토리에 게시되어있는 데이터를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetCertPath(byte[], java.lang.String)">LDAP_GetCertPath</A></B>(byte[]&nbsp;baCert,
                 java.lang.String&nbsp;sConfFilePath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;환경파일 정보를 이용하여 인증서의 경로를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetCRLByCert(byte[])">LDAP_GetCRLByCert</A></B>(byte[]&nbsp;baCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서의 확장필드에 있는 인증서 폐지목록 리스트 배포 위치를 이용하여 인증서 폐지목록 리스트를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)">LDAP_GetDataByURL</A></B>(int&nbsp;nDataType,
                  java.lang.String&nbsp;sURL)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LDAP 디렉토리에 게시되어있는 데이터를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_ChangePasswd(java.lang.String, java.lang.String, byte[])">PRIKEY_ChangePasswd</A></B>(java.lang.String&nbsp;sOldPasswd,
                    java.lang.String&nbsp;sNewPasswd,
                    byte[]&nbsp;baEncPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;암호화되어있는 개인키의 비밀번호를 변경한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_CheckKeyPair(byte[], byte[])">PRIKEY_CheckKeyPair</A></B>(byte[]&nbsp;baCert,
                    byte[]&nbsp;baPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;인증서의 공개키와 개인키의 키쌍을 체크한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_Decrypt(java.lang.String, byte[])">PRIKEY_Decrypt</A></B>(java.lang.String&nbsp;sPasswd,
               byte[]&nbsp;baEncPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;개인키를 비밀번호를 이용하여 복호화한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_Encrypt(int, java.lang.String, byte[])">PRIKEY_Encrypt</A></B>(int&nbsp;nSymAlg,
               java.lang.String&nbsp;sPasswd,
               byte[]&nbsp;baPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;개인키를 비밀번호를 이용하여 암호화한다. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#setSignerCerts(java.lang.String[])">setSignerCerts</A></B>(java.lang.String[]&nbsp;signerCerts)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#setSignTimes(java.lang.String[])">setSignTimes</A></B>(java.lang.String[]&nbsp;signTimes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SIGEA_MakeChallenge()">SIGEA_MakeChallenge</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SIGEA_MakeResponse(byte[], byte[], byte[])">SIGEA_MakeResponse</A></B>(byte[]&nbsp;baChallenge,
                   byte[]&nbsp;baCert,
                   byte[]&nbsp;baPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#SIGEA_VerifyResponse(byte[], byte[])">SIGEA_VerifyResponse</A></B>(byte[]&nbsp;baResponse,
                     byte[]&nbsp;baChallenge)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)">STORAGE_DeleteCert</A></B>(int&nbsp;nMediaType,
                   java.lang.String&nbsp;sInfo,
                   int&nbsp;nDataType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에 있는 인증서를 삭제한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)">STORAGE_DeletePriKey</A></B>(int&nbsp;nMediaType,
                     java.lang.String&nbsp;sInfo,
                     java.lang.String&nbsp;sPasswd,
                     int&nbsp;nDataType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에 있는 개인키를 삭제한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)">STORAGE_ReadCert</A></B>(int&nbsp;nMediaType,
                 java.lang.String&nbsp;sInfo,
                 int&nbsp;nDataType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체로부터 인증서를 읽어 들인다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadFile(java.lang.String)">STORAGE_ReadFile</A></B>(java.lang.String&nbsp;sFilePath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;하드디스크의 저장되어있는 특정 파일을 읽는다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)">STORAGE_ReadPriKey</A></B>(int&nbsp;nMediaType,
                   java.lang.String&nbsp;sInfo,
                   java.lang.String&nbsp;sPasswd,
                   int&nbsp;nDataType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체로부터 개인키를 읽어 들인다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_SetLibraryPath(java.lang.String)">STORAGE_SetLibraryPath</A></B>(java.lang.String&nbsp;sLibPath)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])">STORAGE_WriteCert</A></B>(int&nbsp;nMediaType,
                  java.lang.String&nbsp;sInfo,
                  int&nbsp;nDataType,
                  byte[]&nbsp;baCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에 인증서를 저장한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteFile(java.lang.String, byte[])">STORAGE_WriteFile</A></B>(java.lang.String&nbsp;sFilePath,
                  byte[]&nbsp;baData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;하드디스크의 특정위치에 데이터를 저장한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])">STORAGE_WritePriKey</A></B>(int&nbsp;nMediaType,
                    java.lang.String&nbsp;sInfo,
                    java.lang.String&nbsp;sPasswd,
                    int&nbsp;nDataType,
                    int&nbsp;nSymAlg,
                    byte[]&nbsp;baPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;저장매체에 개인키를 저장한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_GetToken(byte[], int, java.lang.String, boolean, byte[], byte[], java.lang.String, int)">TSP_GetToken</A></B>(byte[]&nbsp;baMsg,
             int&nbsp;nHashAlg,
             java.lang.String&nbsp;sPolicy,
             boolean&nbsp;bSign,
             byte[]&nbsp;baCert,
             byte[]&nbsp;baPriKey,
             java.lang.String&nbsp;sIP,
             int&nbsp;nPort)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 서버에 메시지에 대해서 시점확인을 요청하고 토큰과 시점확인 서버의 인증서를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_GetTokenInfo(byte[])">TSP_GetTokenInfo</A></B>(byte[]&nbsp;baToken)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 토큰의 내용을 확인한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_MakeReqMsg(byte[], int, java.lang.String, boolean, byte[], byte[])">TSP_MakeReqMsg</A></B>(byte[]&nbsp;baMsg,
               int&nbsp;nHashAlg,
               java.lang.String&nbsp;sPolicy,
               boolean&nbsp;bSign,
               byte[]&nbsp;baCert,
               byte[]&nbsp;baPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 토큰을 발급받기 위한 요청문을 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_SendAndRecv(java.lang.String, int, byte[])">TSP_SendAndRecv</A></B>(java.lang.String&nbsp;sIP,
                int&nbsp;nPort,
                byte[]&nbsp;baReqMsg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 요청문을 시점확인 서버에 전송하고 응답 메시지를 받는다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])">TSP_VerifyResMsg</A></B>(byte[]&nbsp;baResMsg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 서버로 부터 받은 응답 메시지를 검증하고 시점확인 서버의 인증서와 시점확인 토큰을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyToken(byte[], byte[])">TSP_VerifyToken</A></B>(byte[]&nbsp;baDoc,
                byte[]&nbsp;baToken)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;시점확인 토큰을 검증한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#VID_GetRandomFromPriKey(byte[])">VID_GetRandomFromPriKey</A></B>(byte[]&nbsp;baPriKey)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;식별번호를 이용한 본인확인을 위해서 개인키에 포함되어있는 랜덤값을 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#VID_Verify(byte[], byte[], java.lang.String)">VID_Verify</A></B>(byte[]&nbsp;baCert,
           byte[]&nbsp;baRandom,
           java.lang.String&nbsp;sIDN)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;식별번호와 랜덤값을 이용하여 인증서 사용자의 본인확인을 수행한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#VID_VerifyByIVS(java.lang.String, byte[], byte[], java.lang.String, byte[])">VID_VerifyByIVS</A></B>(java.lang.String&nbsp;sConfFilePath,
                byte[]&nbsp;baCert,
                byte[]&nbsp;baRandom,
                java.lang.String&nbsp;sIDN,
                byte[]&nbsp;baMyCert)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;환경파일에있는 통합검증서버의 정보(IP, Port)를 이용하여 통합검증서버에 사용자의 본인확인을 요청한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_MakeSignedContent(byte[], byte[], byte[], java.lang.String)">WCMS_MakeSignedContent</A></B>(byte[]&nbsp;baCert,
                       byte[]&nbsp;baPriKey,
                       byte[]&nbsp;baTBSData,
                       java.lang.String&nbsp;sSignTime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;무선용 서명 메시지를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_MakeWapEnvelopedData(byte[], byte[], int)">WCMS_MakeWapEnvelopedData</A></B>(byte[]&nbsp;baCert,
                          byte[]&nbsp;baTBEData,
                          int&nbsp;nSymAlg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;무선용 비대칭키 암호 메시지를 생성한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_ProcessSignedContent(byte[])">WCMS_ProcessSignedContent</A></B>(byte[]&nbsp;baSignedContent)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;무선용 서명 메시지를 검증하고 원본 메시지와 서명자 정보를 획득한다.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_ProcessWapEnvelopedData(byte[], byte[], byte[])">WCMS_ProcessWapEnvelopedData</A></B>(byte[]&nbsp;baCert,
                             byte[]&nbsp;baPriKey,
                             byte[]&nbsp;baWapEnvData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;무선용 비대칭키 암호 메시지를 처리한다.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="sReturnString"><!-- --></A><H3>
sReturnString</H3>
<PRE>
public java.lang.String <B>sReturnString</B></PRE>
<DL>
<DD>함수의 output이 String 형인 경우, 해당 output이 저장됨 <br>
 함수 사용 시, 에러가 발생하였을 경우 에러 코드에 대한 에러 정보가 저장됨 <br>
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="sDetailErrorString"><!-- --></A><H3>
sDetailErrorString</H3>
<PRE>
public java.lang.String <B>sDetailErrorString</B></PRE>
<DL>
<DD>함수 사용 시, 에러가 발생하였을 경우 gpkiapi 동적 라이브러리에서 제공하는 에러 정보를 확인함
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="baReturnArray"><!-- --></A><H3>
baReturnArray</H3>
<PRE>
public byte[] <B>baReturnArray</B></PRE>
<DL>
<DD>함수의 output이 byte[] 형인 경우, 해당 output이 저장됨
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="nReturnInt"><!-- --></A><H3>
nReturnInt</H3>
<PRE>
public int <B>nReturnInt</B></PRE>
<DL>
<DD>함수의 output이 int 형인 경우, 해당 output이 저장됨
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetRemainDays(byte[])"><CODE>CERT_GetRemainDays(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="nSignerCnt"><!-- --></A><H3>
nSignerCnt</H3>
<PRE>
public int <B>nSignerCnt</B></PRE>
<DL>
<DD>유선용 서명 메시지에 포함되어있는 복수의 서명자 인증서의 갯수를 저장
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="baCertArray"><!-- --></A><H3>
baCertArray</H3>
<PRE>
public java.lang.String[] <B>baCertArray</B></PRE>
<DL>
<DD>유선용 서명 메시지에 포함되어있는 복수의 서명자 인증서를 저장
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sSignTimeArray"><!-- --></A><H3>
sSignTimeArray</H3>
<PRE>
public java.lang.String[] <B>sSignTimeArray</B></PRE>
<DL>
<DD>유선용 서명 메시지에 포함되어있는 복수의 서명에 대한 서명 시간 저장
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="baData"><!-- --></A><H3>
baData</H3>
<PRE>
public byte[] <B>baData</B></PRE>
<DL>
<DD>함수의 output이 byte[] 형인 경우, 해당 output이 저장됨
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData(byte[])"><CODE>CMS_ProcessSignedData(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])"><CODE>CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_ProcessSignedContent(byte[])"><CODE>WCMS_ProcessSignedContent(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="baSignerCert"><!-- --></A><H3>
baSignerCert</H3>
<PRE>
public byte[] <B>baSignerCert</B></PRE>
<DL>
<DD>서명 메시지의 서명 주체 인증서가 저장됨
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData(byte[])"><CODE>CMS_ProcessSignedData(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])"><CODE>CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_ProcessSignedContent(byte[])"><CODE>WCMS_ProcessSignedContent(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sSignTime"><!-- --></A><H3>
sSignTime</H3>
<PRE>
public java.lang.String <B>sSignTime</B></PRE>
<DL>
<DD>서명 메시지의 서명 시간이 저장됨
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData(byte[])"><CODE>CMS_ProcessSignedData(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_ProcessSignedContent(byte[])"><CODE>WCMS_ProcessSignedContent(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="baTSACert"><!-- --></A><H3>
baTSACert</H3>
<PRE>
public byte[] <B>baTSACert</B></PRE>
<DL>
<DD>시점확인 서버로 부터 받은 응답 메시지에 포함된 시점확인 서버의 인증서가 저장됨
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="baToken"><!-- --></A><H3>
baToken</H3>
<PRE>
public byte[] <B>baToken</B></PRE>
<DL>
<DD>시점확인 서버로 부터 받은 응답 메시지에 포함된 시점확인 토큰이 저장됨
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTCN"><!-- --></A><H3>
sTCN</H3>
<PRE>
public java.lang.String <B>sTCN</B></PRE>
<DL>
<DD>시점확인 토큰을 발행한 서버 DN의 CN값
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTDN"><!-- --></A><H3>
sTDN</H3>
<PRE>
public java.lang.String <B>sTDN</B></PRE>
<DL>
<DD>시점확인 토큰을 발행한 서버 DN값
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTPolicy"><!-- --></A><H3>
sTPolicy</H3>
<PRE>
public java.lang.String <B>sTPolicy</B></PRE>
<DL>
<DD>시점확인 토큰을 발행시 적용된 정책 식별자
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTHashAlg"><!-- --></A><H3>
sTHashAlg</H3>
<PRE>
public java.lang.String <B>sTHashAlg</B></PRE>
<DL>
<DD>시점확인을 요청한 문서의 메시지 다이제스트 생성 알고리즘
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTHashValue"><!-- --></A><H3>
sTHashValue</H3>
<PRE>
public java.lang.String <B>sTHashValue</B></PRE>
<DL>
<DD>시점확인을 요청한 문서의 메시지 다이제스트
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTSerialNum"><!-- --></A><H3>
sTSerialNum</H3>
<PRE>
public java.lang.String <B>sTSerialNum</B></PRE>
<DL>
<DD>시점확인 서버가 부여한 토큰 일련번호
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTGenTime"><!-- --></A><H3>
sTGenTime</H3>
<PRE>
public java.lang.String <B>sTGenTime</B></PRE>
<DL>
<DD>시점확인 토큰의 생성시간
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="sTNonce"><!-- --></A><H3>
sTNonce</H3>
<PRE>
public java.lang.String <B>sTNonce</B></PRE>
<DL>
<DD>시점확인 요청의 중간 공격을 막기위한 난수값
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="nSymAlg"><!-- --></A><H3>
nSymAlg</H3>
<PRE>
public int <B>nSymAlg</B></PRE>
<DL>
<DD>함수에서 사용하는 대칭키 알고리즘 정보
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GetKeyAndIV()"><CODE>CRYPT_GetKeyAndIV()</CODE></A></DL>
</DL>
<HR>

<A NAME="baKey"><!-- --></A><H3>
baKey</H3>
<PRE>
public byte[] <B>baKey</B></PRE>
<DL>
<DD>함수에서 사용하는 대칭키 알고리즘의 키 정보
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GetKeyAndIV()"><CODE>CRYPT_GetKeyAndIV()</CODE></A></DL>
</DL>
<HR>

<A NAME="baIV"><!-- --></A><H3>
baIV</H3>
<PRE>
public byte[] <B>baIV</B></PRE>
<DL>
<DD>함수에서 사용하는 대칭키 알고리즘의 IV 정보
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GetKeyAndIV()"><CODE>CRYPT_GetKeyAndIV()</CODE></A></DL>
</DL>
<HR>

<A NAME="sLibPath"><!-- --></A><H3>
sLibPath</H3>
<PRE>
protected java.lang.String <B>sLibPath</B></PRE>
<DL>
<DD>스마트 카드의 동적 라이브러리 경로
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="API_OPT_RSA_ENC_V15"><!-- --></A><H3>
API_OPT_RSA_ENC_V15</H3>
<PRE>
public static int <B>API_OPT_RSA_ENC_V15</B></PRE>
<DL>
<DD>RSA알고리즘을 이용한 암/복호화 시에 사용할 RSA 버전 (RSA V1.5)으로서
 기본값으로 API_OPT_RSA_ENC_V20가 설정되어있다.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#API_SetOption(int)"><CODE>API_SetOption(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymEncrypt(int, byte[], byte[])"><CODE>CRYPT_AsymEncrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymDecrypt(int, byte[], byte[])"><CODE>CRYPT_AsymDecrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData(byte[], byte[], int)"><CODE>CMS_MakeEnvelopedData(byte[], byte[], int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData(byte[], byte[], byte[])"><CODE>CMS_ProcessEnvelopedData(byte[], byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="API_OPT_RSA_ENC_V20"><!-- --></A><H3>
API_OPT_RSA_ENC_V20</H3>
<PRE>
public static int <B>API_OPT_RSA_ENC_V20</B></PRE>
<DL>
<DD>RSA알고리즘을 이용한 암/복호화 시에 사용할 RSA 버전(RSA V2.0) <b>(기본값)</b>
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#API_SetOption(int)"><CODE>API_SetOption(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymEncrypt(int, byte[], byte[])"><CODE>CRYPT_AsymEncrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymDecrypt(int, byte[], byte[])"><CODE>CRYPT_AsymDecrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData(byte[], byte[], int)"><CODE>CMS_MakeEnvelopedData(byte[], byte[], int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData(byte[], byte[], byte[])"><CODE>CMS_ProcessEnvelopedData(byte[], byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_TYPE_SIGN"><!-- --></A><H3>
CERT_TYPE_SIGN</H3>
<PRE>
public static int <B>CERT_TYPE_SIGN</B></PRE>
<DL>
<DD>인증서 검증 시, 검증하고자하는 인증서의 종류가 서명용인 경우에 설정한다.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])"><CODE>CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_TYPE_KM"><!-- --></A><H3>
CERT_TYPE_KM</H3>
<PRE>
public static int <B>CERT_TYPE_KM</B></PRE>
<DL>
<DD>인증서 검증 시, 검증하고자하는 인증서의 종류가 키분배용인 경우에 설정한다.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])"><CODE>CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_TYPE_OCSP"><!-- --></A><H3>
CERT_TYPE_OCSP</H3>
<PRE>
public static int <B>CERT_TYPE_OCSP</B></PRE>
<DL>
<DD>인증서 검증 시, 검증하고자하는 인증서의 종류가 OCSP 서버용인 경우에 설정한다.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])"><CODE>CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_TYPE_TSA"><!-- --></A><H3>
CERT_TYPE_TSA</H3>
<PRE>
public static int <B>CERT_TYPE_TSA</B></PRE>
<DL>
<DD>인증서 검증 시, 검증하고자하는 인증서의 종류가 TSA 서버용인 경우에 설정한다.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])"><CODE>CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_VERIFY_FULL_PATH"><!-- --></A><H3>
CERT_VERIFY_FULL_PATH</H3>
<PRE>
public static int <B>CERT_VERIFY_FULL_PATH</B></PRE>
<DL>
<DD>인증서 검증 시, 최상위 인증기관 인증서 부터 사용자 인증서까지 전체 경로를 검증 <b>(기본값)</b>
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_VERIFY_CA_CERT"><!-- --></A><H3>
CERT_VERIFY_CA_CERT</H3>
<PRE>
public static int <B>CERT_VERIFY_CA_CERT</B></PRE>
<DL>
<DD>인증서 검증 시, 최상위 인증기관 하위 인증기관 인증서까지 검증
 기본값으로 CERT_VERIFY_FULL_PATH 가 설정되어있음
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_VERIFY_USER_CERT"><!-- --></A><H3>
CERT_VERIFY_USER_CERT</H3>
<PRE>
public static int <B>CERT_VERIFY_USER_CERT</B></PRE>
<DL>
<DD>인증서 검증 시, 사용자 인증서만을 검증한다.
 기본값으로 CERT_VERIFY_FULL_PATH 가 설정되어있음
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_REV_CHECK_ALL"><!-- --></A><H3>
CERT_REV_CHECK_ALL</H3>
<PRE>
public static int <B>CERT_REV_CHECK_ALL</B></PRE>
<DL>
<DD>인증서 검증 시, 경로의 모든 인증서의 폐지여부를 확인하며,
 사용자 인증서 확인 시, OCSP를 우선적으로 이용하고 실패시 CRL을 이용 <b>(기본값)</b>
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_REV_CHECK_ARL"><!-- --></A><H3>
CERT_REV_CHECK_ARL</H3>
<PRE>
public static int <B>CERT_REV_CHECK_ARL</B></PRE>
<DL>
<DD>인증서 검증 시, 인증기관 인증서의 폐지여부를 ARL을 이용하여 확인함
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_REV_CHECK_CRL"><!-- --></A><H3>
CERT_REV_CHECK_CRL</H3>
<PRE>
public static int <B>CERT_REV_CHECK_CRL</B></PRE>
<DL>
<DD>인증서 검증 시, 사용자 인증서의 폐지여부를 CRL을 이용하여 확인함
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_REV_CHECK_OCSP"><!-- --></A><H3>
CERT_REV_CHECK_OCSP</H3>
<PRE>
public static int <B>CERT_REV_CHECK_OCSP</B></PRE>
<DL>
<DD>인증서 검증 시, 사용자 인증서의 폐지여부를 OCSP를 이용하여 확인함
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="CERT_REV_CHECK_NONE"><!-- --></A><H3>
CERT_REV_CHECK_NONE</H3>
<PRE>
public static int <B>CERT_REV_CHECK_NONE</B></PRE>
<DL>
<DD>인증서 검증 시, 인증서 폐지여부를 확인하지 않음
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="KEY_TYPE_PRIVATE"><!-- --></A><H3>
KEY_TYPE_PRIVATE</H3>
<PRE>
public static int <B>KEY_TYPE_PRIVATE</B></PRE>
<DL>
<DD>개인키를 이용하여 데이터를 암/복호화할 경우 사용
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymEncrypt(int, byte[], byte[])"><CODE>CRYPT_AsymEncrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymDecrypt(int, byte[], byte[])"><CODE>CRYPT_AsymDecrypt(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="KEY_TYPE_PUBLIC"><!-- --></A><H3>
KEY_TYPE_PUBLIC</H3>
<PRE>
public static int <B>KEY_TYPE_PUBLIC</B></PRE>
<DL>
<DD>인증서의 공개키를 이용하여 데이터를 암/복호화할 경우 사용
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymEncrypt(int, byte[], byte[])"><CODE>CRYPT_AsymEncrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymDecrypt(int, byte[], byte[])"><CODE>CRYPT_AsymDecrypt(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="SYM_ALG_DES_CBC"><!-- --></A><H3>
SYM_ALG_DES_CBC</H3>
<PRE>
public static int <B>SYM_ALG_DES_CBC</B></PRE>
<DL>
<DD>DES 알고리즘을 이용한 대칭키 암/복호화
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="SYM_ALG_3DES_CBC"><!-- --></A><H3>
SYM_ALG_3DES_CBC</H3>
<PRE>
public static int <B>SYM_ALG_3DES_CBC</B></PRE>
<DL>
<DD>3DES 알고리즘을 이용한 대칭키 암/복호화
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="SYM_ALG_SEED_CBC"><!-- --></A><H3>
SYM_ALG_SEED_CBC</H3>
<PRE>
public static int <B>SYM_ALG_SEED_CBC</B></PRE>
<DL>
<DD>SEED 알고리즘을 이용한 대칭키 암/복호화
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="SYM_ALG_NEAT_CBC"><!-- --></A><H3>
SYM_ALG_NEAT_CBC</H3>
<PRE>
public static int <B>SYM_ALG_NEAT_CBC</B></PRE>
<DL>
<DD>NEAT 알고리즘을 이용한 대칭키 암/복호화
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="SYM_ALG_ARIA_CBC"><!-- --></A><H3>
SYM_ALG_ARIA_CBC</H3>
<PRE>
public static int <B>SYM_ALG_ARIA_CBC</B></PRE>
<DL>
<DD>ARIA 알고리즘을 이용한 대칭키 암/복호화
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="SYM_ALG_NES_CBC"><!-- --></A><H3>
SYM_ALG_NES_CBC</H3>
<PRE>
public static int <B>SYM_ALG_NES_CBC</B></PRE>
<DL>
<DD>NES 알고리즘을 이용한 대칭키 암/복호화
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="HASH_ALG_SHA1"><!-- --></A><H3>
HASH_ALG_SHA1</H3>
<PRE>
public static int <B>HASH_ALG_SHA1</B></PRE>
<DL>
<DD>SHA1 알고리즘을 이용한 메시지 다이제스트 생성.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Hash(int, byte[])"><CODE>CRYPT_Hash(int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Sign(byte[], byte[], int, byte[])"><CODE>CRYPT_Sign(byte[], byte[], int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Verify(byte[], int, byte[], byte[])"><CODE>CRYPT_Verify(byte[], int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="HASH_ALG_MD5"><!-- --></A><H3>
HASH_ALG_MD5</H3>
<PRE>
public static int <B>HASH_ALG_MD5</B></PRE>
<DL>
<DD>MD5 알고리즘을 이용한 메시지 다이제스트 생성.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Hash(int, byte[])"><CODE>CRYPT_Hash(int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Sign(byte[], byte[], int, byte[])"><CODE>CRYPT_Sign(byte[], byte[], int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Verify(byte[], int, byte[], byte[])"><CODE>CRYPT_Verify(byte[], int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="HASH_ALG_HAS160"><!-- --></A><H3>
HASH_ALG_HAS160</H3>
<PRE>
public static int <B>HASH_ALG_HAS160</B></PRE>
<DL>
<DD>HAS160 알고리즘을 이용한 메시지 다이제스트 생성.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Hash(int, byte[])"><CODE>CRYPT_Hash(int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Sign(byte[], byte[], int, byte[])"><CODE>CRYPT_Sign(byte[], byte[], int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Verify(byte[], int, byte[], byte[])"><CODE>CRYPT_Verify(byte[], int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="HASH_ALG_SHA256"><!-- --></A><H3>
HASH_ALG_SHA256</H3>
<PRE>
public static int <B>HASH_ALG_SHA256</B></PRE>
<DL>
<DD>SHA256 알고리즘을 이용한 메시지 다이제스트 생성.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Hash(int, byte[])"><CODE>CRYPT_Hash(int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Sign(byte[], byte[], int, byte[])"><CODE>CRYPT_Sign(byte[], byte[], int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Verify(byte[], int, byte[], byte[])"><CODE>CRYPT_Verify(byte[], int, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="MAC_ALG_SHA1_HMAC"><!-- --></A><H3>
MAC_ALG_SHA1_HMAC</H3>
<PRE>
public static int <B>MAC_ALG_SHA1_HMAC</B></PRE>
<DL>
<DD>SHA1 HMAC을 이용한 맥값 생성/검증
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenMAC(int, java.lang.String, byte[])"><CODE>CRYPT_GenMAC(int, java.lang.String, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])"><CODE>CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="MAC_ALG_MD5_HMAC"><!-- --></A><H3>
MAC_ALG_MD5_HMAC</H3>
<PRE>
public static int <B>MAC_ALG_MD5_HMAC</B></PRE>
<DL>
<DD>MD5 HMAC을 이용한 맥값 생성/검증
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenMAC(int, java.lang.String, byte[])"><CODE>CRYPT_GenMAC(int, java.lang.String, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])"><CODE>CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_CA_CERT"><!-- --></A><H3>
LDAP_DATA_CA_CERT</H3>
<PRE>
public static int <B>LDAP_DATA_CA_CERT</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 인증기관용 인증서 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_SIGN_CERT"><!-- --></A><H3>
LDAP_DATA_SIGN_CERT</H3>
<PRE>
public static int <B>LDAP_DATA_SIGN_CERT</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 서명용 인증서 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_KM_CERT"><!-- --></A><H3>
LDAP_DATA_KM_CERT</H3>
<PRE>
public static int <B>LDAP_DATA_KM_CERT</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 키분배용용 인증서 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_ARL"><!-- --></A><H3>
LDAP_DATA_ARL</H3>
<PRE>
public static int <B>LDAP_DATA_ARL</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 인증기관용 폐지목록 리스트 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_CRL"><!-- --></A><H3>
LDAP_DATA_CRL</H3>
<PRE>
public static int <B>LDAP_DATA_CRL</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 사용자용 폐지목록 리스트 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_DELTA_CRL"><!-- --></A><H3>
LDAP_DATA_DELTA_CRL</H3>
<PRE>
public static int <B>LDAP_DATA_DELTA_CRL</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 사용자용 델타 폐지목록 리스트 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_CTL"><!-- --></A><H3>
LDAP_DATA_CTL</H3>
<PRE>
public static int <B>LDAP_DATA_CTL</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 인증서 신뢰 목록 리스트 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="LDAP_DATA_GPKI_WCERT"><!-- --></A><H3>
LDAP_DATA_GPKI_WCERT</H3>
<PRE>
public static int <B>LDAP_DATA_GPKI_WCERT</B></PRE>
<DL>
<DD>LDAP에 게시되어있는 무선 행정인증체계의 인증서 획득
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DL>
<HR>

<A NAME="MEDIA_TYPE_FILE_PATH"><!-- --></A><H3>
MEDIA_TYPE_FILE_PATH</H3>
<PRE>
public static int <B>MEDIA_TYPE_FILE_PATH</B></PRE>
<DL>
<DD>하드 디스크, 플로피 디스크, USB 드라이브등과 같이 파일 경로를 통해서 데이터를 획득할 수 있는 저장매체를 이용
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)"><CODE>STORAGE_DeleteCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DL>
<HR>

<A NAME="MEDIA_TYPE_DYNAMIC"><!-- --></A><H3>
MEDIA_TYPE_DYNAMIC</H3>
<PRE>
public static int <B>MEDIA_TYPE_DYNAMIC</B></PRE>
<DL>
<DD>동적 라이브러리를 이용하여 저장매체(스마트카드)하는 경우 이용
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)"><CODE>STORAGE_DeleteCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DL>
<HR>

<A NAME="DATA_TYPE_OTHER"><!-- --></A><H3>
DATA_TYPE_OTHER</H3>
<PRE>
public static int <B>DATA_TYPE_OTHER</B></PRE>
<DL>
<DD>저장매체에서 임의 위치의 개인키/인증서를 다루는 경우
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)"><CODE>STORAGE_DeleteCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DL>
<HR>

<A NAME="DATA_TYPE_GPKI_SIGN"><!-- --></A><H3>
DATA_TYPE_GPKI_SIGN</H3>
<PRE>
public static int <B>DATA_TYPE_GPKI_SIGN</B></PRE>
<DL>
<DD>저장매체에서 행정 서명용 인증서/개인키를 다루는 경우
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)"><CODE>STORAGE_DeleteCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DL>
<HR>

<A NAME="DATA_TYPE_GPKI_KM"><!-- --></A><H3>
DATA_TYPE_GPKI_KM</H3>
<PRE>
public static int <B>DATA_TYPE_GPKI_KM</B></PRE>
<DL>
<DD>저장매체에서 행정 키분배용 인증서/개인키를 다루는 경우
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)"><CODE>STORAGE_DeleteCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DL>
<HR>

<A NAME="DATA_TYPE_NPKI_SIGN"><!-- --></A><H3>
DATA_TYPE_NPKI_SIGN</H3>
<PRE>
public static int <B>DATA_TYPE_NPKI_SIGN</B></PRE>
<DL>
<DD>저장매체에서 민간 서명용 인증서/개인키를 다루는 경우
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)"><CODE>STORAGE_DeleteCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DL>
<HR>

<A NAME="DATA_TYPE_NPKI_KM"><!-- --></A><H3>
DATA_TYPE_NPKI_KM</H3>
<PRE>
public static int <B>DATA_TYPE_NPKI_KM</B></PRE>
<DL>
<DD>저장매체에서 민간 키분배용 인증서/개인키를 다루는 경우
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeleteCert(int, java.lang.String, int)"><CODE>STORAGE_DeleteCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="gpkiapi_jni()"><!-- --></A><H3>
gpkiapi_jni</H3>
<PRE>
public <B>gpkiapi_jni</B>()</PRE>
<DL>
<DD>기본 생성자
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="API_Init(java.lang.String)"><!-- --></A><H3>
API_Init</H3>
<PRE>
public int <B>API_Init</B>(java.lang.String&nbsp;sWorkDir)</PRE>
<DL>
<DD>JNI에서 사용하는 gpkiapi 동적 라이브러리를 초기화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sWorkDir</CODE> - 작업 디렉토리 (인증서 검증 시 캐쉬 저장과 라이센스 파일 위치를 위해 참조됨)
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="API_Finish()"><!-- --></A><H3>
API_Finish</H3>
<PRE>
public int <B>API_Finish</B>()</PRE>
<DL>
<DD>JNI에서 사용하는 gpkiapi 동적 라이브러리를 해제한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="API_GetVersion()"><!-- --></A><H3>
API_GetVersion</H3>
<PRE>
public int <B>API_GetVersion</B>()</PRE>
<DL>
<DD>API의 버전을 확인한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="API_GetInfo()"><!-- --></A><H3>
API_GetInfo</H3>
<PRE>
public int <B>API_GetInfo</B>()</PRE>
<DL>
<DD>라이센스 정보와 함께 API의 버전을 확인한다. 라이센스(gpkiapi.lic)는 API 초기화 시에 지정하였던 작업디렉토리에 존재 햐여야 한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#API_Init(java.lang.String)"><CODE>API_Init(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="API_SetOption(int)"><!-- --></A><H3>
API_SetOption</H3>
<PRE>
public int <B>API_SetOption</B>(int&nbsp;nRSAOption)</PRE>
<DL>
<DD>API 사용 시, 필요한 옵션을 설정한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nRSAOption</CODE> - 옵션 코드 (RSA 암/복호화 : API_OPT_RSA_ENC_V15, API_OPT_RSA_ENC_V20)
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymEncrypt(int, byte[], byte[])"><CODE>CRYPT_AsymEncrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymDecrypt(int, byte[], byte[])"><CODE>CRYPT_AsymDecrypt(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData(byte[], byte[], int)"><CODE>CMS_MakeEnvelopedData(byte[], byte[], int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedAndEnvData(byte[], byte[], byte[], byte[], int)"><CODE>CMS_MakeSignedAndEnvData(byte[], byte[], byte[], byte[], int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_Load(byte[])"><!-- --></A><H3>
CERT_Load</H3>
<PRE>
public int <B>CERT_Load</B>(byte[]&nbsp;baCert)</PRE>
<DL>
<DD>정보를 확인하기 위한 인증서 메모리에 로드한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 정보를 확인하고자 하는 인증서
<DT><B>Returns:</B><DD>성공시 0 리턴<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Unload()"><CODE>CERT_Unload()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_Unload()"><!-- --></A><H3>
CERT_Unload</H3>
<PRE>
public int <B>CERT_Unload</B>()</PRE>
<DL>
<DD>정보 확인을 위해 메모리에 로드되어있던 인증서를 해제한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetUID()"><!-- --></A><H3>
CERT_GetUID</H3>
<PRE>
public int <B>CERT_GetUID</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 주체 DN의 CN값을 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetSerialNum()"><!-- --></A><H3>
CERT_GetSerialNum</H3>
<PRE>
public int <B>CERT_GetSerialNum</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 일련번호를 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetIssuerName()"><!-- --></A><H3>
CERT_GetIssuerName</H3>
<PRE>
public int <B>CERT_GetIssuerName</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 발급자 이름(DN)을 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetSubjectName()"><!-- --></A><H3>
CERT_GetSubjectName</H3>
<PRE>
public int <B>CERT_GetSubjectName</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 주체 이름(DN)을 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetValidity()"><!-- --></A><H3>
CERT_GetValidity</H3>
<PRE>
public int <B>CERT_GetValidity</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 유효기간을 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetPubKeyAlg()"><!-- --></A><H3>
CERT_GetPubKeyAlg</H3>
<PRE>
public int <B>CERT_GetPubKeyAlg</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 공개키 알고리즘을 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetKeyUsage()"><!-- --></A><H3>
CERT_GetKeyUsage</H3>
<PRE>
public int <B>CERT_GetKeyUsage</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 용도를 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetCertPolicyID()"><!-- --></A><H3>
CERT_GetCertPolicyID</H3>
<PRE>
public int <B>CERT_GetCertPolicyID</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 정책 식별자(OID)를 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetBasicConstraints()"><!-- --></A><H3>
CERT_GetBasicConstraints</H3>
<PRE>
public int <B>CERT_GetBasicConstraints</B>()</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 기본제한 정보를 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetRemainDays(byte[])"><!-- --></A><H3>
CERT_GetRemainDays</H3>
<PRE>
public int <B>CERT_GetRemainDays</B>(byte[]&nbsp;baCert)</PRE>
<DL>
<DD>정보 확인을 위해 로드한 인증서의 남은 유효기간을 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (nReturnInt를 이용하여 결과값을 확인한다.)<br>                                                                              
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Load(byte[])"><CODE>CERT_Load(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_AddTrustedCert(byte[])"><!-- --></A><H3>
CERT_AddTrustedCert</H3>
<PRE>
public int <B>CERT_AddTrustedCert</B>(byte[]&nbsp;baTrustedCert)</PRE>
<DL>
<DD>인증서 검증 시에 사용될 검증자가 신뢰하는 최상위 인증기관 인증서를 지정한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baTrustedCert</CODE> - 신뢰하는 최상위 인증기관 인증서
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])"><CODE>CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_AddCert(byte[])"><!-- --></A><H3>
CERT_AddCert</H3>
<PRE>
public int <B>CERT_AddCert</B>(byte[]&nbsp;baCert)</PRE>
<DL>
<DD>인증서를 추가하여 복수개의 인증서 구조체를 만든다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 복수개의 인증서 구조체에 추가할 인증서
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetCertCount(byte[])"><CODE>CERT_GetCertCount(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetCert(byte[], int)"><CODE>CERT_GetCert(byte[], int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetCertCount(byte[])"><!-- --></A><H3>
CERT_GetCertCount</H3>
<PRE>
public int <B>CERT_GetCertCount</B>(byte[]&nbsp;baCerts)</PRE>
<DL>
<DD>복수개의 인증서 구조체에 포함되어있는 인증서의 갯수를 확인한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCerts</CODE> - 복수개의 인증서 구조체
<DT><B>Returns:</B><DD>성공시 0 리턴 (nRetrunInt를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_AddCert(byte[])"><CODE>CERT_AddCert(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetCert(byte[], int)"><CODE>CERT_GetCert(byte[], int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_GetCert(byte[], int)"><!-- --></A><H3>
CERT_GetCert</H3>
<PRE>
public int <B>CERT_GetCert</B>(byte[]&nbsp;baCerts,
                        int&nbsp;nIndex)</PRE>
<DL>
<DD>복수개의 인증서 구조체에 있는 특정 인덱스의 인증서를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCerts</CODE> - 복수개의 인증서 구조체<DD><CODE>nIndex</CODE> - 획득할 인증서의 인덱스
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_AddCert(byte[])"><CODE>CERT_AddCert(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CERT_GetCertCount(byte[])"><CODE>CERT_GetCertCount(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><!-- --></A><H3>
CERT_SetVerifyEnv</H3>
<PRE>
public int <B>CERT_SetVerifyEnv</B>(int&nbsp;nRange,
                             int&nbsp;nCertCheck,
                             boolean&nbsp;bUseCash,
                             java.lang.String&nbsp;sTime,
                             java.lang.String&nbsp;sOCSPURL)</PRE>
<DL>
<DD>인증서 검증 시, 필요한 옵션을 지정한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nRange</CODE> - 인증서 검증 범위 (코드 : CERT_VERIFY_FULL_PATH, CERT_VERIFY_CA_CERT, CERT_VERIFY_USER_CERT)<DD><CODE>nCertCheck</CODE> - 인증서 폐지 여부 확인 방법 (코드 : CERT_REV_CHECK_ALL, CERT_REV_CHECK_ARL, CERT_REV_CHECK_CRL, CERT_REV_CHECK_OCSP)<DD><CODE>bUseCash</CODE> - 인증서 검증 시, 획득한 정보 저장 여부<DD><CODE>sTime</CODE> - 인증서 경로 검증 시간. 비어있는 값인 경우에는 시스템의 현재 시간이 설정됨 (로컬시간 : YYYYMMDDhhmmss, 표준시간 : YYYYMMDDhhmmssz(Z))<DD><CODE>sOCSPURL</CODE> - OCSP 서비스 위치
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])"><CODE>CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_Verify(byte[], int, java.lang.String, java.lang.String, boolean, byte[], byte[])"><!-- --></A><H3>
CERT_Verify</H3>
<PRE>
public int <B>CERT_Verify</B>(byte[]&nbsp;baCert,
                       int&nbsp;nCertType,
                       java.lang.String&nbsp;sCertPolicies,
                       java.lang.String&nbsp;sConfFilePath,
                       boolean&nbsp;bSign,
                       byte[]&nbsp;baMyCert,
                       byte[]&nbsp;baMyPriKey)</PRE>
<DL>
<DD>인증서를 검증한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 검증할 인증서<DD><CODE>nCertType</CODE> - 검증할 인증서 종류 (코드 : CERT_TYPE_SIGN, CERT_TYPE_KM, CERT_TYPE_OCSP, CERT_TYPE_TSA)<DD><CODE>sCertPolicies</CODE> - 허용하는 인증서의 정책 식별자(OID) (예 - 1.2.410.100001.2.1.2;1.2.410.100001.2.1.3)<DD><CODE>sConfFilePath</CODE> - 환경 파일(gpkiapi.conf) 위치<DD><CODE>bSign</CODE> - 인증서 폐지 여부 확인을 위해서 OCSP를 이용할 경우 요청문에 서명 여부<DD><CODE>baMyCert</CODE> - 인증서 폐지 여부 확인을 위해서 OCSP를 이용할 경우 요청문에 서명 시 사용할 서명자 인증서<DD><CODE>baMyPriKey</CODE> - 인증서 폐지 여부 확인을 위해서 OCSP를 이용할 경우 요청문에 서명 시 사용할 서명자 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_AddTrustedCert(byte[])"><CODE>CERT_AddTrustedCert(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)"><CODE>CERT_SetVerifyEnv(int, int, boolean, java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CERT_VerifyByIVS(java.lang.String, byte[], byte[])"><!-- --></A><H3>
CERT_VerifyByIVS</H3>
<PRE>
public int <B>CERT_VerifyByIVS</B>(java.lang.String&nbsp;sConfFilePath,
                            byte[]&nbsp;baCert,
                            byte[]&nbsp;baMyCert)</PRE>
<DL>
<DD>환경파일에있는 통합검증서버의 정보(IP, Port)를 이용하여 통합검증서버를 이용하여 인증서를 검증한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sConfFilePath</CODE> - 환경 파일(gpkiapi.conf) 위치<DD><CODE>baCert</CODE> - 검증할 인증서<DD><CODE>baMyCert</CODE> - 검증 요청자의 인증서
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="PRIKEY_Encrypt(int, java.lang.String, byte[])"><!-- --></A><H3>
PRIKEY_Encrypt</H3>
<PRE>
public int <B>PRIKEY_Encrypt</B>(int&nbsp;nSymAlg,
                          java.lang.String&nbsp;sPasswd,
                          byte[]&nbsp;baPriKey)</PRE>
<DL>
<DD>개인키를 비밀번호를 이용하여 암호화한다. 대칭키 알고리즘은 NEAT 또는 SEED를 사용할 것을 권장한다.)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nSymAlg</CODE> - 개인키 암호화에 사용할 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)<DD><CODE>sPasswd</CODE> - 개인키 비밀번호<DD><CODE>baPriKey</CODE> - 암호화할 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_Decrypt(java.lang.String, byte[])"><CODE>PRIKEY_Decrypt(java.lang.String, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="PRIKEY_Decrypt(java.lang.String, byte[])"><!-- --></A><H3>
PRIKEY_Decrypt</H3>
<PRE>
public int <B>PRIKEY_Decrypt</B>(java.lang.String&nbsp;sPasswd,
                          byte[]&nbsp;baEncPriKey)</PRE>
<DL>
<DD>개인키를 비밀번호를 이용하여 복호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sPasswd</CODE> - 개인키 비밀번호<DD><CODE>baEncPriKey</CODE> - 암호화된 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_Encrypt(int, java.lang.String, byte[])"><CODE>PRIKEY_Encrypt(int, java.lang.String, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="PRIKEY_ChangePasswd(java.lang.String, java.lang.String, byte[])"><!-- --></A><H3>
PRIKEY_ChangePasswd</H3>
<PRE>
public int <B>PRIKEY_ChangePasswd</B>(java.lang.String&nbsp;sOldPasswd,
                               java.lang.String&nbsp;sNewPasswd,
                               byte[]&nbsp;baEncPriKey)</PRE>
<DL>
<DD>암호화되어있는 개인키의 비밀번호를 변경한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sOldPasswd</CODE> - 기존의 개인키 비밀번호<DD><CODE>sNewPasswd</CODE> - 새 개인키 비밀번호<DD><CODE>baEncPriKey</CODE> - 암호화된 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_Encrypt(int, java.lang.String, byte[])"><CODE>PRIKEY_Encrypt(int, java.lang.String, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#PRIKEY_Decrypt(java.lang.String, byte[])"><CODE>PRIKEY_Decrypt(java.lang.String, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="PRIKEY_CheckKeyPair(byte[], byte[])"><!-- --></A><H3>
PRIKEY_CheckKeyPair</H3>
<PRE>
public int <B>PRIKEY_CheckKeyPair</B>(byte[]&nbsp;baCert,
                               byte[]&nbsp;baPriKey)</PRE>
<DL>
<DD>인증서의 공개키와 개인키의 키쌍을 체크한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 인증서<DD><CODE>baPriKey</CODE> - 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_SetLibraryPath(java.lang.String)"><!-- --></A><H3>
STORAGE_SetLibraryPath</H3>
<PRE>
public void <B>STORAGE_SetLibraryPath</B>(java.lang.String&nbsp;sLibPath)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_ReadCert(int, java.lang.String, int)"><!-- --></A><H3>
STORAGE_ReadCert</H3>
<PRE>
public int <B>STORAGE_ReadCert</B>(int&nbsp;nMediaType,
                            java.lang.String&nbsp;sInfo,
                            int&nbsp;nDataType)</PRE>
<DL>
<DD>저장매체로부터 인증서를 읽어 들인다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMediaType</CODE> - 저장매체 타입 (코드 : MEDIA_TYPE_FILE_PATH, MEDIA_TYPE_DYNAMIC)<DD><CODE>sInfo</CODE> - 저장매체가 스마트카드인 경우에 PIN값을 그 이외에는 인증서가 저장되어있는 파일 경로<DD><CODE>nDataType</CODE> - 데이터 종류 (코드 : DATA_TYPE_OTHER, DATA_TYPE_GPKI_SIGN, DATA_TYPE_GPKI_KM, DATA_TYPE_NPKI_SIGN, DATA_TYPE_NPKI_KM)
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><!-- --></A><H3>
STORAGE_ReadPriKey</H3>
<PRE>
public int <B>STORAGE_ReadPriKey</B>(int&nbsp;nMediaType,
                              java.lang.String&nbsp;sInfo,
                              java.lang.String&nbsp;sPasswd,
                              int&nbsp;nDataType)</PRE>
<DL>
<DD>저장매체로부터 개인키를 읽어 들인다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMediaType</CODE> - 저장매체 타입 (코드 : MEDIA_TYPE_FILE_PATH, MEDIA_TYPE_DYNAMIC)<DD><CODE>sInfo</CODE> - 저장매체가 스마트카드인 경우에 PIN값을 그 이외에는 인증서가 저장되어있는 파일 경로<DD><CODE>sPasswd</CODE> - 개인키 비밀번호<DD><CODE>nDataType</CODE> - 데이터 종류 (코드 : DATA_TYPE_OTHER, DATA_TYPE_GPKI_SIGN, DATA_TYPE_GPKI_KM, DATA_TYPE_NPKI_SIGN, DATA_TYPE_NPKI_KM)
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_WriteCert(int, java.lang.String, int, byte[])"><!-- --></A><H3>
STORAGE_WriteCert</H3>
<PRE>
public int <B>STORAGE_WriteCert</B>(int&nbsp;nMediaType,
                             java.lang.String&nbsp;sInfo,
                             int&nbsp;nDataType,
                             byte[]&nbsp;baCert)</PRE>
<DL>
<DD>저장매체에 인증서를 저장한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMediaType</CODE> - 저장매체 타입 (코드 : MEDIA_TYPE_FILE_PATH, MEDIA_TYPE_DYNAMIC)<DD><CODE>sInfo</CODE> - 저장매체가 스마트카드인 경우에 PIN값을 그 이외에는 인증서가 저장되어있는 파일 경로<DD><CODE>nDataType</CODE> - 데이터 종류 (코드 : DATA_TYPE_OTHER, DATA_TYPE_GPKI_SIGN, DATA_TYPE_GPKI_KM, DATA_TYPE_NPKI_SIGN, DATA_TYPE_NPKI_KM)<DD><CODE>baCert</CODE> - 저장할 인증서
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><CODE>STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadCert(int, java.lang.String, int)"><CODE>STORAGE_ReadCert(int, java.lang.String, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_WritePriKey(int, java.lang.String, java.lang.String, int, int, byte[])"><!-- --></A><H3>
STORAGE_WritePriKey</H3>
<PRE>
public int <B>STORAGE_WritePriKey</B>(int&nbsp;nMediaType,
                               java.lang.String&nbsp;sInfo,
                               java.lang.String&nbsp;sPasswd,
                               int&nbsp;nDataType,
                               int&nbsp;nSymAlg,
                               byte[]&nbsp;baPriKey)</PRE>
<DL>
<DD>저장매체에 개인키를 저장한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMediaType</CODE> - 저장매체 타입 (코드 : MEDIA_TYPE_FILE_PATH, MEDIA_TYPE_DYNAMIC)<DD><CODE>sInfo</CODE> - 저장매체가 스마트카드인 경우에 PIN값을 그 이외에는 인증서가 저장되어있는 파일 경로<DD><CODE>sPasswd</CODE> - 개인키 비밀번호<DD><CODE>nDataType</CODE> - 데이터 종류 (코드 : DATA_TYPE_OTHER, DATA_TYPE_GPKI_SIGN, DATA_TYPE_GPKI_KM, DATA_TYPE_NPKI_SIGN, DATA_TYPE_NPKI_KM)<DD><CODE>nSymAlg</CODE> - 개인키 암호 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)<DD><CODE>baPriKey</CODE> - 저장할 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteCert(int, java.lang.String, int, byte[])"><CODE>STORAGE_WriteCert(int, java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_ReadPriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_DeleteCert(int, java.lang.String, int)"><!-- --></A><H3>
STORAGE_DeleteCert</H3>
<PRE>
public int <B>STORAGE_DeleteCert</B>(int&nbsp;nMediaType,
                              java.lang.String&nbsp;sInfo,
                              int&nbsp;nDataType)</PRE>
<DL>
<DD>저장매체에 있는 인증서를 삭제한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMediaType</CODE> - 저장매체 타입 (코드 : MEDIA_TYPE_FILE_PATH, MEDIA_TYPE_DYNAMIC)<DD><CODE>sInfo</CODE> - 저장매체가 스마트카드인 경우에 PIN값을 그 이외에는 인증서가 저장되어있는 디렉토리 경로<DD><CODE>nDataType</CODE> - 데이터 종류 (코드 : DATA_TYPE_OTHER, DATA_TYPE_GPKI_SIGN, DATA_TYPE_GPKI_KM, DATA_TYPE_NPKI_SIGN, DATA_TYPE_NPKI_KM)
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><!-- --></A><H3>
STORAGE_DeletePriKey</H3>
<PRE>
public int <B>STORAGE_DeletePriKey</B>(int&nbsp;nMediaType,
                                java.lang.String&nbsp;sInfo,
                                java.lang.String&nbsp;sPasswd,
                                int&nbsp;nDataType)</PRE>
<DL>
<DD>저장매체에 있는 개인키를 삭제한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMediaType</CODE> - 저장매체 타입 (코드 : MEDIA_TYPE_FILE_PATH, MEDIA_TYPE_DYNAMIC)<DD><CODE>sInfo</CODE> - 저장매체가 스마트카드인 경우에 PIN값을 그 이외에는 인증서가 저장되어있는 디렉토리 경로<DD><CODE>sPasswd</CODE> - 개인키 비밀번호<DD><CODE>nDataType</CODE> - 데이터 종류 (코드 : DATA_TYPE_OTHER, DATA_TYPE_GPKI_SIGN, DATA_TYPE_GPKI_KM, DATA_TYPE_NPKI_SIGN, DATA_TYPE_NPKI_KM)
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)"><CODE>STORAGE_DeletePriKey(int, java.lang.String, java.lang.String, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_ReadFile(java.lang.String)"><!-- --></A><H3>
STORAGE_ReadFile</H3>
<PRE>
public int <B>STORAGE_ReadFile</B>(java.lang.String&nbsp;sFilePath)</PRE>
<DL>
<DD>하드디스크의 저장되어있는 특정 파일을 읽는다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sFilePath</CODE> - 읽어 들일 파일 경로
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_WriteFile(java.lang.String, byte[])"><CODE>STORAGE_WriteFile(java.lang.String, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="STORAGE_WriteFile(java.lang.String, byte[])"><!-- --></A><H3>
STORAGE_WriteFile</H3>
<PRE>
public int <B>STORAGE_WriteFile</B>(java.lang.String&nbsp;sFilePath,
                             byte[]&nbsp;baData)</PRE>
<DL>
<DD>하드디스크의 특정위치에 데이터를 저장한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sFilePath</CODE> - 저장될 파일 경로<DD><CODE>baData</CODE> - 저장될 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#STORAGE_ReadFile(java.lang.String)"><CODE>STORAGE_ReadFile(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)"><!-- --></A><H3>
CMS_MakeSignedData</H3>
<PRE>
public int <B>CMS_MakeSignedData</B>(byte[]&nbsp;baCert,
                              byte[]&nbsp;baPriKey,
                              byte[]&nbsp;baTBSData,
                              java.lang.String&nbsp;sSignTime)</PRE>
<DL>
<DD>메시지의 무결성과 서명자의 인증을 위하여 유선용 서명 메시지를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 서명용 인증서<DD><CODE>baPriKey</CODE> - 서명용 개인키<DD><CODE>baTBSData</CODE> - 서명 할 데이터<DD><CODE>sSignTime</CODE> - 서명시간, 비어있는 값인 경우에는 시스템의 현재 시간이 설정됨 (로컬시간 : YYYYMMDDhhmmss, 표준시간 : YYYYMMDDhhmmssz(Z))
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData(byte[])"><CODE>CMS_ProcessSignedData(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedDataWithAddSigner(byte[], byte[], byte[], java.lang.String)"><CODE>CMS_MakeSignedDataWithAddSigner(byte[], byte[], byte[], java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeSignedDataWithAddSigner(byte[], byte[], byte[], java.lang.String)"><!-- --></A><H3>
CMS_MakeSignedDataWithAddSigner</H3>
<PRE>
public int <B>CMS_MakeSignedDataWithAddSigner</B>(byte[]&nbsp;baCert,
                                           byte[]&nbsp;baPriKey,
                                           byte[]&nbsp;baSignedData,
                                           java.lang.String&nbsp;sSignTime)</PRE>
<DL>
<DD>이미 생성된 유선용 서명 메시지에 서명을 추가한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 서명용 인증서<DD><CODE>baPriKey</CODE> - 서명용 개인키<DD><CODE>baSignedData</CODE> - 서명을 추가할 서명 메시지<DD><CODE>sSignTime</CODE> - 서명시간, 비어있는 값인 경우에는 시스템의 현재 시간이 설정됨 (로컬시간 : YYYYMMDDhhmmss, 표준시간 : YYYYMMDDhhmmssz(Z))
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)"><CODE>CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_ProcessSignedData(byte[])"><!-- --></A><H3>
CMS_ProcessSignedData</H3>
<PRE>
public int <B>CMS_ProcessSignedData</B>(byte[]&nbsp;baSignedData)</PRE>
<DL>
<DD>유선용 서명 메시지의 서명을 검증하고 원본 데이터와 서명자 정보를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baSignedData</CODE> - 검증할 서명 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (원본 데이터는 baData, 서명자 인증서는 baSignerCert, 서명 시간은 sSignTime을 이용하여 결과값을 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)"><CODE>CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_ProcessSignedData2(byte[])"><!-- --></A><H3>
CMS_ProcessSignedData2</H3>
<PRE>
public int <B>CMS_ProcessSignedData2</B>(byte[]&nbsp;baSignedData)</PRE>
<DL>
<DD>유선용 서명 메시지의 서명을 검증하고 원본 데이터와 복수의 서명자 정보를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baSignedData</CODE> - 검증할 서명 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (원본 데이터는 baReturnArray, 서명자 수는 nSignerCnt을 이용하여 결과값을 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#getCMS_GetSinger(int)"><CODE>getCMS_GetSinger(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#getCMS_GetSignTime(int)"><CODE>getCMS_GetSignTime(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)"><CODE>CMS_MakeSignedData(byte[], byte[], byte[], java.lang.String)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedDataWithAddSigner(byte[], byte[], byte[], java.lang.String)"><CODE>CMS_MakeSignedDataWithAddSigner(byte[], byte[], byte[], java.lang.String)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData(byte[])"><CODE>CMS_ProcessSignedData(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setSignerCerts(java.lang.String[])"><!-- --></A><H3>
setSignerCerts</H3>
<PRE>
protected void <B>setSignerCerts</B>(java.lang.String[]&nbsp;signerCerts)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSignTimes(java.lang.String[])"><!-- --></A><H3>
setSignTimes</H3>
<PRE>
protected void <B>setSignTimes</B>(java.lang.String[]&nbsp;signTimes)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getCMS_GetSinger(int)"><!-- --></A><H3>
getCMS_GetSinger</H3>
<PRE>
public byte[] <B>getCMS_GetSinger</B>(int&nbsp;index)</PRE>
<DL>
<DD>CMS_ProcessSignedData2 메소드를 이용하여 서명 메시지를 검증하였을 경우 서명자 인증서를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - 획득할 인증서의 인덱스 (0부터 시작)
<DT><B>Returns:</B><DD>서명자의 인증서<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#getCMS_GetSignTime(int)"><CODE>getCMS_GetSignTime(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getCMS_GetSignTime(int)"><!-- --></A><H3>
getCMS_GetSignTime</H3>
<PRE>
public java.lang.String <B>getCMS_GetSignTime</B>(int&nbsp;index)</PRE>
<DL>
<DD>CMS_ProcessSignedData2 메소드를 이용하여 서명 메시지를 검증하였을 경우 서명 시간을 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - 획득할 서명 시간의 인덱스 (0부터 시작)
<DT><B>Returns:</B><DD>서명 시간<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedData2(byte[])"><CODE>CMS_ProcessSignedData2(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#getCMS_GetSinger(int)"><CODE>getCMS_GetSinger(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeEnvelopedData(byte[], byte[], int)"><!-- --></A><H3>
CMS_MakeEnvelopedData</H3>
<PRE>
public int <B>CMS_MakeEnvelopedData</B>(byte[]&nbsp;baCert,
                                 byte[]&nbsp;baTBEData,
                                 int&nbsp;nSymAlg)</PRE>
<DL>
<DD>데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 수신자의 인증서<DD><CODE>baTBEData</CODE> - 암호화될 데이터<DD><CODE>nSymAlg</CODE> - 데이터를 암호화하는데 사용될 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedDataWithMultiRecipients(byte[], byte[], int)"><CODE>CMS_MakeEnvelopedDataWithMultiRecipients(byte[], byte[], int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData(byte[], byte[], byte[])"><CODE>CMS_ProcessEnvelopedData(byte[], byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeEnvelopedData_File(byte[], java.lang.String, int, java.lang.String)"><!-- --></A><H3>
CMS_MakeEnvelopedData_File</H3>
<PRE>
public int <B>CMS_MakeEnvelopedData_File</B>(byte[]&nbsp;baCert,
                                      java.lang.String&nbsp;sMsgFilePath,
                                      int&nbsp;nSymAlg,
                                      java.lang.String&nbsp;sEnvDataFilePath)</PRE>
<DL>
<DD>데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다. <br>
 원본 메시지와 생성된 암호 메시지는 파일 형태이다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 수신자의 인증서<DD><CODE>sMsgFilePath</CODE> - 암호화할 메시지의 파일 경로<DD><CODE>nSymAlg</CODE> - 데이터를 암호화하는데 사용될 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)<DD><CODE>sEnvDataFilePath</CODE> - 암호화된 메시지의 파일 경로
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData_File(byte[], byte[], java.lang.String, java.lang.String)"><CODE>CMS_ProcessEnvelopedData_File(byte[], byte[], java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeEnvelopedData_NoContent_File(byte[], java.lang.String, int, java.lang.String, java.lang.String)"><!-- --></A><H3>
CMS_MakeEnvelopedData_NoContent_File</H3>
<PRE>
public int <B>CMS_MakeEnvelopedData_NoContent_File</B>(byte[]&nbsp;baCert,
                                                java.lang.String&nbsp;sMsgFilePath,
                                                int&nbsp;nSymAlg,
                                                java.lang.String&nbsp;sEnvDataFilePath,
                                                java.lang.String&nbsp;sEncFilePath)</PRE>
<DL>
<DD>데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다. <br>
 이 때 생성되는 암호 메시지에는 암호화시 사용된 관련 정보만 포함되어있고 실제 암호문은 포함되어있지 않다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 수신자의 인증서<DD><CODE>sMsgFilePath</CODE> - 암호화할 메시지의 파일 경로<DD><CODE>nSymAlg</CODE> - 데이터를 암호화하는데 사용될 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)<DD><CODE>sEnvDataFilePath</CODE> - 암호화시 사용된 관련 정보 저장 위치<DD><CODE>sEncFilePath</CODE> - 암호화된 메시지 저장 위치
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData_NoContent_File(byte[], byte[], java.lang.String, java.lang.String, java.lang.String)"><CODE>CMS_ProcessEnvelopedData_NoContent_File(byte[], byte[], java.lang.String, java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeEnvelopedDataWithMultiRecipients(byte[], byte[], int)"><!-- --></A><H3>
CMS_MakeEnvelopedDataWithMultiRecipients</H3>
<PRE>
public int <B>CMS_MakeEnvelopedDataWithMultiRecipients</B>(byte[]&nbsp;baCerts,
                                                    byte[]&nbsp;baTBEData,
                                                    int&nbsp;nSymAlg)</PRE>
<DL>
<DD>데이터의 기밀성을 위하여 데이터를 암호화하여 유선용 암호 메시지를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCerts</CODE> - 복수의 수신자의 인증서<DD><CODE>baTBEData</CODE> - 암호화될 데이터<DD><CODE>nSymAlg</CODE> - 데이터를 암호화하는데 사용될 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 결과값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CERT_AddCert(byte[])"><CODE>CERT_AddCert(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData(byte[], byte[], int)"><CODE>CMS_MakeEnvelopedData(byte[], byte[], int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEnvelopedData(byte[], byte[], byte[])"><CODE>CMS_ProcessEnvelopedData(byte[], byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_ProcessEnvelopedData(byte[], byte[], byte[])"><!-- --></A><H3>
CMS_ProcessEnvelopedData</H3>
<PRE>
public int <B>CMS_ProcessEnvelopedData</B>(byte[]&nbsp;baCert,
                                    byte[]&nbsp;baPriKey,
                                    byte[]&nbsp;baEnvelopedData)</PRE>
<DL>
<DD>유선용 암호 메시지를 복호화하여 원본 메시지를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 복호화에 사용되는 개인키와 쌍을 이루는 인증서<DD><CODE>baPriKey</CODE> - 복호화에 사용될 개인키<DD><CODE>baEnvelopedData</CODE> - EnvelopedData 형식의 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 원본메시지을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData(byte[], byte[], int)"><CODE>CMS_MakeEnvelopedData(byte[], byte[], int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedDataWithMultiRecipients(byte[], byte[], int)"><CODE>CMS_MakeEnvelopedDataWithMultiRecipients(byte[], byte[], int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_ProcessEnvelopedData_File(byte[], byte[], java.lang.String, java.lang.String)"><!-- --></A><H3>
CMS_ProcessEnvelopedData_File</H3>
<PRE>
public int <B>CMS_ProcessEnvelopedData_File</B>(byte[]&nbsp;baCert,
                                         byte[]&nbsp;baPriKey,
                                         java.lang.String&nbsp;sEnvDataFilePath,
                                         java.lang.String&nbsp;sMsgFilePath)</PRE>
<DL>
<DD>유선용 암호 메시지를 복호화하여 원본 메시지를 획득한다.<br>
 암호 메시지와 복호화된 원본 메시지는 파일 형태이다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 복호화에 사용되는 개인키와 쌍을 이루는 인증서<DD><CODE>baPriKey</CODE> - 복호화에 사용될 개인키<DD><CODE>sEnvDataFilePath</CODE> - 암호 메시지 파일 위치<DD><CODE>sMsgFilePath</CODE> - 복호화된 원본 메시지 파일 위치
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData_File(byte[], java.lang.String, int, java.lang.String)"><CODE>CMS_MakeEnvelopedData_File(byte[], java.lang.String, int, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_ProcessEnvelopedData_NoContent_File(byte[], byte[], java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
CMS_ProcessEnvelopedData_NoContent_File</H3>
<PRE>
public int <B>CMS_ProcessEnvelopedData_NoContent_File</B>(byte[]&nbsp;baCert,
                                                   byte[]&nbsp;baPriKey,
                                                   java.lang.String&nbsp;sEnvDataFilePath,
                                                   java.lang.String&nbsp;sEncFilePath,
                                                   java.lang.String&nbsp;sMsgFilePath)</PRE>
<DL>
<DD>유선용 암호 메시지를 복호화하여 원본 메시지를 획득한다.<br>
 암호 메시지와 복호화된 원본 메시지는 파일 형태이다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 복호화에 사용되는 개인키와 쌍을 이루는 인증서<DD><CODE>baPriKey</CODE> - 복호화에 사용될 개인키<DD><CODE>sEnvDataFilePath</CODE> - 암호화시 사용된 관련정보 파일 위치<DD><CODE>sEncFilePath</CODE> - 암호문 파일 위치<DD><CODE>sMsgFilePath</CODE> - 복호화된 평문 메시지가 저장될 파일 위치
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeEnvelopedData_NoContent_File(byte[], java.lang.String, int, java.lang.String, java.lang.String)"><CODE>CMS_MakeEnvelopedData_NoContent_File(byte[], java.lang.String, int, java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeSignedAndEnvData(byte[], byte[], byte[], byte[], int)"><!-- --></A><H3>
CMS_MakeSignedAndEnvData</H3>
<PRE>
public int <B>CMS_MakeSignedAndEnvData</B>(byte[]&nbsp;baCert,
                                    byte[]&nbsp;baPriKey,
                                    byte[]&nbsp;baRecCert,
                                    byte[]&nbsp;baData,
                                    int&nbsp;nSymAlg)</PRE>
<DL>
<DD>유선용 서명 및 암호 메시지를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 서명자의 인증서<DD><CODE>baPriKey</CODE> - 서명자의 개인키<DD><CODE>baRecCert</CODE> - 수신자의 인증서<DD><CODE>baData</CODE> - 서명 및 암호화될 데이터<DD><CODE>nSymAlg</CODE> - 데이터를 암호화하는데 사용될 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 서명 및 암호 메시지를 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])"><CODE>CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_ProcessSignedAndEnvData(byte[], byte[], byte[])"><!-- --></A><H3>
CMS_ProcessSignedAndEnvData</H3>
<PRE>
public int <B>CMS_ProcessSignedAndEnvData</B>(byte[]&nbsp;baCert,
                                       byte[]&nbsp;baKey,
                                       byte[]&nbsp;baSignedAndEnvlopedData)</PRE>
<DL>
<DD>유선용 서명 및 암호 메시지를 처리한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 복호화에 사용될 인증서<DD><CODE>baKey</CODE> - 복호화에 사용될 키<DD><CODE>baSignedAndEnvlopedData</CODE> - 서명 및 암호 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (원문은 baData,서명자 인증서는 baSignerCert를 이용하여 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_MakeSignedAndEnvData(byte[], byte[], byte[], byte[], int)"><CODE>CMS_MakeSignedAndEnvData(byte[], byte[], byte[], byte[], int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_MakeEncryptedData(byte[])"><!-- --></A><H3>
CMS_MakeEncryptedData</H3>
<PRE>
public int <B>CMS_MakeEncryptedData</B>(byte[]&nbsp;baTBEData)</PRE>
<DL>
<DD>이미 생성 또는 설정된 대칭키 알고리즘, 키, IV값을 이용하여 대칭키 암호 메시지를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baTBEData</CODE> - 암호화할 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 대칭키 암호 메시지를 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEncryptedData(byte[], byte[])"><CODE>CMS_ProcessEncryptedData(byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CMS_ProcessEncryptedData(byte[], byte[])"><!-- --></A><H3>
CMS_ProcessEncryptedData</H3>
<PRE>
public int <B>CMS_ProcessEncryptedData</B>(byte[]&nbsp;baKey,
                                    byte[]&nbsp;baEncryptedData)</PRE>
<DL>
<DD>대칭키 암호 메시지를 복호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baKey</CODE> - 대칭키 암호 메시지를 생성 시, 사용된 키<DD><CODE>baEncryptedData</CODE> - 대칭키 암호 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 원본 메시지를 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CMS_ProcessEncryptedData(byte[], byte[])"><CODE>CMS_ProcessEncryptedData(byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="WCMS_MakeSignedContent(byte[], byte[], byte[], java.lang.String)"><!-- --></A><H3>
WCMS_MakeSignedContent</H3>
<PRE>
public int <B>WCMS_MakeSignedContent</B>(byte[]&nbsp;baCert,
                                  byte[]&nbsp;baPriKey,
                                  byte[]&nbsp;baTBSData,
                                  java.lang.String&nbsp;sSignTime)</PRE>
<DL>
<DD>무선용 서명 메시지를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 서명용 인증서<DD><CODE>baPriKey</CODE> - 서명용 개인키<DD><CODE>baTBSData</CODE> - 서명 될 데이터<DD><CODE>sSignTime</CODE> - 서명시간, 비어있는 값인 경우에는 시스템의 현재 시간이 설정됨 (로컬시간 : YYYYMMDDhhmmss, 표준시간 : YYYYMMDDhhmmssz(Z))
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 서명 메시지를 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_ProcessSignedContent(byte[])"><CODE>WCMS_ProcessSignedContent(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="WCMS_ProcessSignedContent(byte[])"><!-- --></A><H3>
WCMS_ProcessSignedContent</H3>
<PRE>
public int <B>WCMS_ProcessSignedContent</B>(byte[]&nbsp;baSignedContent)</PRE>
<DL>
<DD>무선용 서명 메시지를 검증하고 원본 메시지와 서명자 정보를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baSignedContent</CODE> - 무선용 서명 메시지(SignedContent) 형식의 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (원본 데이터는 baData, 서명자 인증서는 baSignerCert, 서명 시간은 sSignTime을 이용하여 결과값을 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_MakeSignedContent(byte[], byte[], byte[], java.lang.String)"><CODE>WCMS_MakeSignedContent(byte[], byte[], byte[], java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="WCMS_MakeWapEnvelopedData(byte[], byte[], int)"><!-- --></A><H3>
WCMS_MakeWapEnvelopedData</H3>
<PRE>
public int <B>WCMS_MakeWapEnvelopedData</B>(byte[]&nbsp;baCert,
                                     byte[]&nbsp;baTBEData,
                                     int&nbsp;nSymAlg)</PRE>
<DL>
<DD>무선용 비대칭키 암호 메시지를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 수신자의 키분배용 인증서<DD><CODE>baTBEData</CODE> - 암호화할 데이터<DD><CODE>nSymAlg</CODE> - 데이터를 암호화하는데 사용될 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 비대칭키 암호 메시지를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_ProcessWapEnvelopedData(byte[], byte[], byte[])"><CODE>WCMS_ProcessWapEnvelopedData(byte[], byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="WCMS_ProcessWapEnvelopedData(byte[], byte[], byte[])"><!-- --></A><H3>
WCMS_ProcessWapEnvelopedData</H3>
<PRE>
public int <B>WCMS_ProcessWapEnvelopedData</B>(byte[]&nbsp;baCert,
                                        byte[]&nbsp;baPriKey,
                                        byte[]&nbsp;baWapEnvData)</PRE>
<DL>
<DD>무선용 비대칭키 암호 메시지를 처리한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 키분배용 인증서<DD><CODE>baPriKey</CODE> - 키분배용 개인키<DD><CODE>baWapEnvData</CODE> - 무선용 비대칭키 암호 멧시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 원본 메시지를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#WCMS_MakeWapEnvelopedData(byte[], byte[], int)"><CODE>WCMS_MakeWapEnvelopedData(byte[], byte[], int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="TSP_MakeReqMsg(byte[], int, java.lang.String, boolean, byte[], byte[])"><!-- --></A><H3>
TSP_MakeReqMsg</H3>
<PRE>
public int <B>TSP_MakeReqMsg</B>(byte[]&nbsp;baMsg,
                          int&nbsp;nHashAlg,
                          java.lang.String&nbsp;sPolicy,
                          boolean&nbsp;bSign,
                          byte[]&nbsp;baCert,
                          byte[]&nbsp;baPriKey)</PRE>
<DL>
<DD>시점확인 토큰을 발급받기 위한 요청문을 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baMsg</CODE> - 시점확인 토큰을 요청할 메시지<DD><CODE>nHashAlg</CODE> - 메시지 다이제스트 생성 시, 사용할 해쉬 알고리즘 (코드 : HASH_ALG_SHA1, HASH_ALG_MD5, HASH_ALG_HAS160)<DD><CODE>sPolicy</CODE> - 시점확인 토큰 생성시 사용될 정책 식별자(OID)<DD><CODE>bSign</CODE> - 요청 메시지에 서명 할 지의 여부<DD><CODE>baCert</CODE> - 요청 메시지에 서명할 경우 요청자의 서명용 인증서<DD><CODE>baPriKey</CODE> - 요청 메시지에 서명할 경우 요청자의 서명용 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 요청 메시지를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_SendAndRecv(java.lang.String, int, byte[])"><CODE>TSP_SendAndRecv(java.lang.String, int, byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="TSP_SendAndRecv(java.lang.String, int, byte[])"><!-- --></A><H3>
TSP_SendAndRecv</H3>
<PRE>
public int <B>TSP_SendAndRecv</B>(java.lang.String&nbsp;sIP,
                           int&nbsp;nPort,
                           byte[]&nbsp;baReqMsg)</PRE>
<DL>
<DD>시점확인 요청문을 시점확인 서버에 전송하고 응답 메시지를 받는다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sIP</CODE> - 시점확인 서버의 IP<DD><CODE>nPort</CODE> - 시점확인 서버의 Port<DD><CODE>baReqMsg</CODE> - 시점확인 요청 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 응답 메시지를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_MakeReqMsg(byte[], int, java.lang.String, boolean, byte[], byte[])"><CODE>TSP_MakeReqMsg(byte[], int, java.lang.String, boolean, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyResMsg(byte[])"><CODE>TSP_VerifyResMsg(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="TSP_VerifyResMsg(byte[])"><!-- --></A><H3>
TSP_VerifyResMsg</H3>
<PRE>
public int <B>TSP_VerifyResMsg</B>(byte[]&nbsp;baResMsg)</PRE>
<DL>
<DD>시점확인 서버로 부터 받은 응답 메시지를 검증하고 시점확인 서버의 인증서와 시점확인 토큰을 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baResMsg</CODE> - 응답 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (시점확인 서버의 인증서는 baTSACert,시점확인 토큰은 baToken을 이용하여 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_MakeReqMsg(byte[], int, java.lang.String, boolean, byte[], byte[])"><CODE>TSP_MakeReqMsg(byte[], int, java.lang.String, boolean, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#TSP_SendAndRecv(java.lang.String, int, byte[])"><CODE>TSP_SendAndRecv(java.lang.String, int, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="TSP_GetToken(byte[], int, java.lang.String, boolean, byte[], byte[], java.lang.String, int)"><!-- --></A><H3>
TSP_GetToken</H3>
<PRE>
public int <B>TSP_GetToken</B>(byte[]&nbsp;baMsg,
                        int&nbsp;nHashAlg,
                        java.lang.String&nbsp;sPolicy,
                        boolean&nbsp;bSign,
                        byte[]&nbsp;baCert,
                        byte[]&nbsp;baPriKey,
                        java.lang.String&nbsp;sIP,
                        int&nbsp;nPort)</PRE>
<DL>
<DD>시점확인 서버에 메시지에 대해서 시점확인을 요청하고 토큰과 시점확인 서버의 인증서를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baMsg</CODE> - 시점확인 토큰을 요청할 메시지<DD><CODE>nHashAlg</CODE> - 메시지 다이제스트 생성 시, 사용할 해쉬 알고리즘 (코드 : HASH_ALG_SHA1, HASH_ALG_MD5, HASH_ALG_HAS160)<DD><CODE>sPolicy</CODE> - 시점확인 토큰 생성시 사용될 정책 식별자(OID)<DD><CODE>bSign</CODE> - 요청 메시지에 서명 할 지의 여부<DD><CODE>baCert</CODE> - 요청 메시지에 서명할 경우 요청자의 서명용 인증서<DD><CODE>baPriKey</CODE> - 요청 메시지에 서명할 경우 요청자의 서명용 개인키<DD><CODE>sIP</CODE> - 시점확인 서버의 IP<DD><CODE>nPort</CODE> - 시점확인 서버의 Port
<DT><B>Returns:</B><DD>성공시 0 리턴 (시점확인 서버의 인증서는 baTSACert,시점확인 토큰은 baToken을 이용하여 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyToken(byte[], byte[])"><CODE>TSP_VerifyToken(byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#TSP_GetTokenInfo(byte[])"><CODE>TSP_GetTokenInfo(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="TSP_VerifyToken(byte[], byte[])"><!-- --></A><H3>
TSP_VerifyToken</H3>
<PRE>
public int <B>TSP_VerifyToken</B>(byte[]&nbsp;baDoc,
                           byte[]&nbsp;baToken)</PRE>
<DL>
<DD>시점확인 토큰을 검증한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baDoc</CODE> - 시점확인을 요청했던 메시지<DD><CODE>baToken</CODE> - 시점확인 토큰
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_GetTokenInfo(byte[])"><CODE>TSP_GetTokenInfo(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="TSP_GetTokenInfo(byte[])"><!-- --></A><H3>
TSP_GetTokenInfo</H3>
<PRE>
public int <B>TSP_GetTokenInfo</B>(byte[]&nbsp;baToken)</PRE>
<DL>
<DD>시점확인 토큰의 내용을 확인한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baToken</CODE> - 시점확인 토큰
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
 	   (시점확인 서버의 인증서 DN의 CN값은 sTCN, 시점확인 서버의 인증서 DN의 CN값은 sTDN, <br>
	   시점확인 토큰의 생성시 적용된 정책 식별자는 sTPolicy, 시점확인을 요청한 메시지의 해쉬 알고리즘은 sTHashAlg, <br>
	   시점확인을 요청한 메시지의 메시지 다이제스트 sTHashValue, 시점확인 토큰의 일련번호는 sTSerialNum, <br>
	   시점확인 토큰이 생성된 시간은 sTGenTime, 시점확인 토큰 요청 시 제3자 공격을 막기위한 난수는 sTNonce을 이용하여 확인한다.) <br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#TSP_VerifyToken(byte[], byte[])"><CODE>TSP_VerifyToken(byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="VID_GetRandomFromPriKey(byte[])"><!-- --></A><H3>
VID_GetRandomFromPriKey</H3>
<PRE>
public int <B>VID_GetRandomFromPriKey</B>(byte[]&nbsp;baPriKey)</PRE>
<DL>
<DD>식별번호를 이용한 본인확인을 위해서 개인키에 포함되어있는 랜덤값을 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baPriKey</CODE> - 암호화되어있지 않은 개인키
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray을 이용하여 랜덤값을 확인한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#VID_Verify(byte[], byte[], java.lang.String)"><CODE>VID_Verify(byte[], byte[], java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="VID_Verify(byte[], byte[], java.lang.String)"><!-- --></A><H3>
VID_Verify</H3>
<PRE>
public int <B>VID_Verify</B>(byte[]&nbsp;baCert,
                      byte[]&nbsp;baRandom,
                      java.lang.String&nbsp;sIDN)</PRE>
<DL>
<DD>식별번호와 랜덤값을 이용하여 인증서 사용자의 본인확인을 수행한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 본인확인을 하고자 하는 사용자의 인증서<DD><CODE>baRandom</CODE> - 본인확인할 사용자가 전송한 랜덤값<DD><CODE>sIDN</CODE> - 본인확인할 사용자의 식별번호(주민(사업자) 등록번호
<DT><B>Returns:</B><DD>성공시 0 리턴 <br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#VID_GetRandomFromPriKey(byte[])"><CODE>VID_GetRandomFromPriKey(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="VID_VerifyByIVS(java.lang.String, byte[], byte[], java.lang.String, byte[])"><!-- --></A><H3>
VID_VerifyByIVS</H3>
<PRE>
public int <B>VID_VerifyByIVS</B>(java.lang.String&nbsp;sConfFilePath,
                           byte[]&nbsp;baCert,
                           byte[]&nbsp;baRandom,
                           java.lang.String&nbsp;sIDN,
                           byte[]&nbsp;baMyCert)</PRE>
<DL>
<DD>환경파일에있는 통합검증서버의 정보(IP, Port)를 이용하여 통합검증서버에 사용자의 본인확인을 요청한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sConfFilePath</CODE> - 환경 파일(gpkiapi.conf) 위치<DD><CODE>baCert</CODE> - 본인확인할 사용자의 인증서<DD><CODE>baRandom</CODE> - 본인확인할 사용자가 전송한 랜덤값 (사용자가 랜덤값이 없어서 보내지 않은경우에는 null을 지정한다.)<DD><CODE>sIDN</CODE> - 본인확인할 사용자의 식별번호(주민(사업자) 등록번호<DD><CODE>baMyCert</CODE> - 통합검증서버에 본인확인을 요청하는 요청자의 인증서
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_GenRandom(int)"><!-- --></A><H3>
CRYPT_GenRandom</H3>
<PRE>
public int <B>CRYPT_GenRandom</B>(int&nbsp;nLen)</PRE>
<DL>
<DD>임의 길이의 난수를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nLen</CODE> - 생성하고자하는 난수의 길이(단위 : byte)
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 생성된 난수를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_GenKeyAndIV(int)"><!-- --></A><H3>
CRYPT_GenKeyAndIV</H3>
<PRE>
public int <B>CRYPT_GenKeyAndIV</B>(int&nbsp;nSymAlg)</PRE>
<DL>
<DD>대칭키 알고리즘에 따른 키와 IV를 생성하여 환경변수에 설정한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nSymAlg</CODE> - 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GetKeyAndIV()"><CODE>CRYPT_GetKeyAndIV()</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_ClearKeyAndIV()"><CODE>CRYPT_ClearKeyAndIV()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_SetKeyAndIV(int, byte[], byte[])"><!-- --></A><H3>
CRYPT_SetKeyAndIV</H3>
<PRE>
public int <B>CRYPT_SetKeyAndIV</B>(int&nbsp;nSymAlg,
                             byte[]&nbsp;baKey,
                             byte[]&nbsp;baIV)</PRE>
<DL>
<DD>대칭키 알고리즘에 따른 키와 IV를 설정한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nSymAlg</CODE> - 대칭키 알고리즘 (코드 : SYM_ALG_DES_CBC, SYM_ALG_3DES_CBC, SYM_ALG_SEED_CBC, SYM_ALG_NEAT_CBC)<DD><CODE>baKey</CODE> - 키<DD><CODE>baIV</CODE> - Iv
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GetKeyAndIV()"><CODE>CRYPT_GetKeyAndIV()</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_ClearKeyAndIV()"><CODE>CRYPT_ClearKeyAndIV()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_GetKeyAndIV()"><!-- --></A><H3>
CRYPT_GetKeyAndIV</H3>
<PRE>
public int <B>CRYPT_GetKeyAndIV</B>()</PRE>
<DL>
<DD>설정되어있는 대칭키 알고리즘과 키, IV를 획득한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴 (대칭키 알고리즘은 nSymAlg, 키는 baKey, IV는 baIV를 이용하여 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_ClearKeyAndIV()"><CODE>CRYPT_ClearKeyAndIV()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_ClearKeyAndIV()"><!-- --></A><H3>
CRYPT_ClearKeyAndIV</H3>
<PRE>
public int <B>CRYPT_ClearKeyAndIV</B>()</PRE>
<DL>
<DD>설정되어있는 대칭키 알고리즘과 키, IV를 삭제한다.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GetKeyAndIV()"><CODE>CRYPT_GetKeyAndIV()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_Encrypt(byte[])"><!-- --></A><H3>
CRYPT_Encrypt</H3>
<PRE>
public int <B>CRYPT_Encrypt</B>(byte[]&nbsp;baPlainText)</PRE>
<DL>
<DD>설정되어있는 대칭키 정보를 이용하여 데이터를 암호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baPlainText</CODE> - 암호화할 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴(baReturnArray를 이용하여 대칭키 암호화된 메시지를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Decrypt(byte[])"><CODE>CRYPT_Decrypt(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_Encrypt_File(java.lang.String, java.lang.String)"><!-- --></A><H3>
CRYPT_Encrypt_File</H3>
<PRE>
public int <B>CRYPT_Encrypt_File</B>(java.lang.String&nbsp;sPlainTextPath,
                              java.lang.String&nbsp;sCipherTextPath)</PRE>
<DL>
<DD>설정되어있는 대칭키 정보를 이용하여 파일을 암호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sPlainTextPath</CODE> - 암호화할 메시지 파일 경로<DD><CODE>sCipherTextPath</CODE> - 복호화한 메시지 파일 경로
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Decrypt_File(java.lang.String, java.lang.String)"><CODE>CRYPT_Decrypt_File(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_Decrypt(byte[])"><!-- --></A><H3>
CRYPT_Decrypt</H3>
<PRE>
public int <B>CRYPT_Decrypt</B>(byte[]&nbsp;baCipherText)</PRE>
<DL>
<DD>설정되어있는 대칭키 정보를 이용하여 데이터를 복호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCipherText</CODE> - 복호화할 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴(baReturnArray를 이용하여 복호화된 메시지를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Encrypt(byte[])"><CODE>CRYPT_Encrypt(byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_Decrypt_File(java.lang.String, java.lang.String)"><!-- --></A><H3>
CRYPT_Decrypt_File</H3>
<PRE>
public int <B>CRYPT_Decrypt_File</B>(java.lang.String&nbsp;sCipherTextPath,
                              java.lang.String&nbsp;sPlainTextPath)</PRE>
<DL>
<DD>설정되어있는 대칭키 정보를 이용하여 파일을 복호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sCipherTextPath</CODE> - 복호화할 메시지 파일 경로<DD><CODE>sPlainTextPath</CODE> - 복호화한 메시지 파일 경로
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Encrypt_File(java.lang.String, java.lang.String)"><CODE>CRYPT_Encrypt_File(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_SetKeyAndIV(int, byte[], byte[])"><CODE>CRYPT_SetKeyAndIV(int, byte[], byte[])</CODE></A>, 
<A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenKeyAndIV(int)"><CODE>CRYPT_GenKeyAndIV(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_Sign(byte[], byte[], int, byte[])"><!-- --></A><H3>
CRYPT_Sign</H3>
<PRE>
public int <B>CRYPT_Sign</B>(byte[]&nbsp;baCert,
                      byte[]&nbsp;baPriKey,
                      int&nbsp;nHashAlg,
                      byte[]&nbsp;baTBSData)</PRE>
<DL>
<DD>개인키를 이용하여 메시지의 서명값을 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 개인키와 쌍을 이루는 인증서<DD><CODE>baPriKey</CODE> - 개인키<DD><CODE>nHashAlg</CODE> - 서명에 사용될 해쉬 알고리즘 (코드 : HASH_ALG_SHA1, HASH_ALG_MD5, HASH_ALG_HAS160)<DD><CODE>baTBSData</CODE> - 서명될 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴(baReturnArray를 이용하여 서명값을 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Verify(byte[], int, byte[], byte[])"><CODE>CRYPT_Verify(byte[], int, byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_Verify(byte[], int, byte[], byte[])"><!-- --></A><H3>
CRYPT_Verify</H3>
<PRE>
public int <B>CRYPT_Verify</B>(byte[]&nbsp;baPubKey,
                        int&nbsp;nHashAlg,
                        byte[]&nbsp;baData,
                        byte[]&nbsp;baSignature)</PRE>
<DL>
<DD>공개키와 원본 메시지를 이용하여 서명값을 검증한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baPubKey</CODE> - 인증서<DD><CODE>nHashAlg</CODE> - 서명에 사용된 해쉬 알고리즘 (코드 : HASH_ALG_SHA1, HASH_ALG_MD5, HASH_ALG_HAS160)<DD><CODE>baData</CODE> - 서명에 사용된 원본 데이터<DD><CODE>baSignature</CODE> - 서명값
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_Sign(byte[], byte[], int, byte[])"><CODE>CRYPT_Sign(byte[], byte[], int, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_AsymEncrypt(int, byte[], byte[])"><!-- --></A><H3>
CRYPT_AsymEncrypt</H3>
<PRE>
public int <B>CRYPT_AsymEncrypt</B>(int&nbsp;nKeyType,
                             byte[]&nbsp;baKey,
                             byte[]&nbsp;baTBEData)</PRE>
<DL>
<DD>비대칭키를 이용하여 암호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nKeyType</CODE> - 키 종류 (공개키, 개인키) (코드 : KEY_TYPE_PRIVATE, KEY_TYPE_PUBLIC)<DD><CODE>baKey</CODE> - 개인키 또는 공개키(인증서)<DD><CODE>baTBEData</CODE> - 암호화 될 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 암호화된 데이터를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymDecrypt(int, byte[], byte[])"><CODE>CRYPT_AsymDecrypt(int, byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_AsymDecrypt(int, byte[], byte[])"><!-- --></A><H3>
CRYPT_AsymDecrypt</H3>
<PRE>
public int <B>CRYPT_AsymDecrypt</B>(int&nbsp;nKeyType,
                             byte[]&nbsp;baKey,
                             byte[]&nbsp;baEncData)</PRE>
<DL>
<DD>비대칭키를 이용하여 복호화한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nKeyType</CODE> - 키 종류 (공개키, 개인키) (코드 : KEY_TYPE_PRIVATE, KEY_TYPE_PUBLIC)<DD><CODE>baKey</CODE> - 개인키 또는 공개키(인증서)<DD><CODE>baEncData</CODE> - 복호화 할 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 복호화된 데이터를 획득한다.) <br>
         실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을
         확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_AsymEncrypt(int, byte[], byte[])"><CODE>CRYPT_AsymEncrypt(int, byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_Hash(int, byte[])"><!-- --></A><H3>
CRYPT_Hash</H3>
<PRE>
public int <B>CRYPT_Hash</B>(int&nbsp;nHashAlg,
                      byte[]&nbsp;baTBHData)</PRE>
<DL>
<DD>해쉬알고리즘을 이용하여 메시지 다이제스트를 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nHashAlg</CODE> - 해쉬 알고리즘 (코드 : HASH_ALG_SHA1, HASH_ALG_MD5, HASH_ALG_HAS160)<DD><CODE>baTBHData</CODE> - 다이제스트할 메시지
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 메시지 다이제스트를 획득한다.) <br>
         실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을
         확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_GenMAC(int, java.lang.String, byte[])"><!-- --></A><H3>
CRYPT_GenMAC</H3>
<PRE>
public int <B>CRYPT_GenMAC</B>(int&nbsp;nMACAlg,
                        java.lang.String&nbsp;sPasswd,
                        byte[]&nbsp;baTBMData)</PRE>
<DL>
<DD>데이터의 MAC값을 생성한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMACAlg</CODE> - MAC 알고리즘 (코드 : MAC_ALG_SHA1_HMAC, MAC_ALG_MD5_HMAC)<DD><CODE>sPasswd</CODE> - MAC 값 생성을 위해 필요한 비밀번호<DD><CODE>baTBMData</CODE> - MAC 값을 구할 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray를 이용하여 메시지의 MAC값을 획득한다.) <br>
         실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을
         확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])"><CODE>CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="CRYPT_VerifyMAC(int, java.lang.String, byte[], byte[])"><!-- --></A><H3>
CRYPT_VerifyMAC</H3>
<PRE>
public int <B>CRYPT_VerifyMAC</B>(int&nbsp;nMACAlg,
                           java.lang.String&nbsp;sPasswd,
                           byte[]&nbsp;baTBMData,
                           byte[]&nbsp;baMAC)</PRE>
<DL>
<DD>데이터의 MAC값을 검증한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nMACAlg</CODE> - MAC 알고리즘 (코드 : MAC_ALG_SHA1_HMAC, MAC_ALG_MD5_HMAC)<DD><CODE>sPasswd</CODE> - MAC 값 생성을 위해 필요한 비밀번호<DD><CODE>baTBMData</CODE> - MAC 값을 구할 데이터<DD><CODE>baMAC</CODE> - MAC 값
<DT><B>Returns:</B><DD>성공시 0 리턴<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#CRYPT_GenMAC(int, java.lang.String, byte[])"><CODE>CRYPT_GenMAC(int, java.lang.String, byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="BASE64_Encode(byte[])"><!-- --></A><H3>
BASE64_Encode</H3>
<PRE>
public int <B>BASE64_Encode</B>(byte[]&nbsp;baData)</PRE>
<DL>
<DD>데이터를 BASE64 인코딩한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baData</CODE> - BASE64 인코딩 할 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 인코딩된 데이터를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#BASE64_Decode(java.lang.String)"><CODE>BASE64_Decode(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="BASE64_Decode(java.lang.String)"><!-- --></A><H3>
BASE64_Decode</H3>
<PRE>
public int <B>BASE64_Decode</B>(java.lang.String&nbsp;sEncData)</PRE>
<DL>
<DD>데이터를 BASE64 디코딩한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sEncData</CODE> - 디코딩할 데이터
<DT><B>Returns:</B><DD>성공시 0 리턴 (baReturnArray을 이용하여 디코딩된 데이터를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#BASE64_Encode(byte[])"><CODE>BASE64_Encode(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="LDAP_GetDataByURL(int, java.lang.String)"><!-- --></A><H3>
LDAP_GetDataByURL</H3>
<PRE>
public int <B>LDAP_GetDataByURL</B>(int&nbsp;nDataType,
                             java.lang.String&nbsp;sURL)</PRE>
<DL>
<DD>LDAP 디렉토리에 게시되어있는 데이터를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nDataType</CODE> - 획득하고자 하는 데이터 타입 <br>
                      (코드 : LDAP_DATA_CA_CERT, LDAP_DATA_SIGN_CERT, LDAP_DATA_KM_CERT, LDAP_DATA_ARL, 
         LDAP_DATA_CRL, LDAP_DATA_DELTA_CRL, LDAP_DATA_CTL, LDAP_DATA_GPKI_WCERT)<DD><CODE>sURL</CODE> - 데이터의 LDAP 게시 위치
<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 데이터를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetAnyDataByURL(java.lang.String, java.lang.String)"><CODE>LDAP_GetAnyDataByURL(java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="LDAP_GetAnyDataByURL(java.lang.String, java.lang.String)"><!-- --></A><H3>
LDAP_GetAnyDataByURL</H3>
<PRE>
public int <B>LDAP_GetAnyDataByURL</B>(java.lang.String&nbsp;sAttribute,
                                java.lang.String&nbsp;sURL)</PRE>
<DL>
<DD>LDAP 디렉토리에 게시되어있는 데이터를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sAttribute</CODE> - 획득하고자 하는 데이터의 Attribute<DD><CODE>sURL</CODE> - 데이터의 LDAP 게시 위치
<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 데이터를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)<DT><B>See Also:</B><DD><A HREF="../../com/gpki/gpkiapi_jni.html#LDAP_GetDataByURL(int, java.lang.String)"><CODE>LDAP_GetDataByURL(int, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="LDAP_GetCRLByCert(byte[])"><!-- --></A><H3>
LDAP_GetCRLByCert</H3>
<PRE>
public int <B>LDAP_GetCRLByCert</B>(byte[]&nbsp;baCert)</PRE>
<DL>
<DD>인증서의 확장필드에 있는 인증서 폐지목록 리스트 배포 위치를 이용하여 인증서 폐지목록 리스트를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 인증서 폐지목록 리스트를 획득할 인증서
<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 인증서 폐지목록을 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="LDAP_GetCertPath(byte[], java.lang.String)"><!-- --></A><H3>
LDAP_GetCertPath</H3>
<PRE>
public int <B>LDAP_GetCertPath</B>(byte[]&nbsp;baCert,
                            java.lang.String&nbsp;sConfFilePath)</PRE>
<DL>
<DD>환경파일 정보를 이용하여 인증서의 경로를 획득한다.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>baCert</CODE> - 인증서 경로를 획득할 사용자 인증서<DD><CODE>sConfFilePath</CODE> - 환경파일 경로
<DT><B>Returns:</B><DD>성공시 0 리턴 (sReturnString을 이용하여 인증서 경로를 획득한다.)<br>
	   실패시 에러코드(양수) 리턴 (sReturnString, sDetailErrorString을 이용하여 에러 원인을 확인한다.)</DL>
</DD>
</DL>
<HR>

<A NAME="SIGEA_MakeChallenge()"><!-- --></A><H3>
SIGEA_MakeChallenge</H3>
<PRE>
public int <B>SIGEA_MakeChallenge</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="SIGEA_MakeResponse(byte[], byte[], byte[])"><!-- --></A><H3>
SIGEA_MakeResponse</H3>
<PRE>
public int <B>SIGEA_MakeResponse</B>(byte[]&nbsp;baChallenge,
                              byte[]&nbsp;baCert,
                              byte[]&nbsp;baPriKey)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="SIGEA_VerifyResponse(byte[], byte[])"><!-- --></A><H3>
SIGEA_VerifyResponse</H3>
<PRE>
public int <B>SIGEA_VerifyResponse</B>(byte[]&nbsp;baResponse,
                                byte[]&nbsp;baChallenge)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<b>GPKIAPI <br>V1.3.0.0</b></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="gpkiapi_jni.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>
<br><font size=3><b>Copyright ⓒ2003-2006 GCC Co.,Ltd . All rights reserved</b></font>
</BODY>
</HTML>
